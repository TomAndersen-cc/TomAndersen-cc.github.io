<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eden</title>
  
  <subtitle>Get busy living, or get busy dying</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tomandersen-cc.github.io/"/>
  <updated>2020-03-17T13:48:26.717Z</updated>
  <id>https://tomandersen-cc.github.io/</id>
  
  <author>
    <name>Tom Andersen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kafka之获取指定Topic-Partition的Leader</title>
    <link href="https://tomandersen-cc.github.io/2020/03/17/Kafka%E4%B9%8B%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9ATopic-Partition%E7%9A%84Leader/"/>
    <id>https://tomandersen-cc.github.io/2020/03/17/Kafka%E4%B9%8B%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9ATopic-Partition%E7%9A%84Leader/</id>
    <published>2020-03-17T13:46:17.000Z</published>
    <updated>2020-03-17T13:48:26.717Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>kafka版本：2.11-2.1.1</li><li>基于Kafka Java API</li><li>主要是通过封装<code>Consumer.partitionsFor</code>方法实现此功能</li></ul><a id="more"></a><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 用于寻找指定Brokers-Topic-Partition对应的Leader.</span></span><br><span class="line"><span class="comment">     * 主要是封装了&#123;<span class="doctag">@link</span> KafkaConsumer#partitionsFor&#125;方法.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> brokers   指定的Kafka集群,格式为&lt;"host","port"&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic     指定的Topic</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> partition 指定的Partition ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Node &#123;<span class="doctag">@link</span> Node&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/3/17</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">findLeader</span><span class="params">(Map&lt;String, Integer&gt; brokers, String topic, <span class="keyword">int</span> partition)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.通过接收到的配置信息创建KafkaConsumer实例</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">for</span> (String broker : brokers.keySet()) &#123;</span><br><span class="line">            props.put(<span class="string">"bootstrap.servers"</span>,</span><br><span class="line">                    broker + <span class="string">":"</span> + brokers.getOrDefault(broker, <span class="number">9092</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 指定Consumer所属的ConsumerGroup</span></span><br><span class="line">        props.put(<span class="string">"group.id"</span>, <span class="string">"test"</span>);</span><br><span class="line">        <span class="comment">// 设置手动提交Offset,由于只是获取部分数据所以不需要自动提交Offset</span></span><br><span class="line">        props.put(<span class="string">"enable.auto.commit"</span>, <span class="string">"false"</span>);</span><br><span class="line">        <span class="comment">// 设置键值对&lt;K,V&gt;反序列化器,使用String对象反序列化器</span></span><br><span class="line">        props.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        props.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.定义KafkaConsumer实例,采用try&#123;&#125;catch&#123;&#125;finally&#123;&#125;的方式获取资源</span></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3.创建KafkaConsumer实例</span></span><br><span class="line">            kafkaConsumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line">            <span class="comment">// 4.通过KafkaConsumer实例获取指定Topic对应的Partition信息</span></span><br><span class="line">            List&lt;PartitionInfo&gt; partitionInfos = kafkaConsumer.partitionsFor(topic);</span><br><span class="line">            <span class="comment">// 5.遍历返回的指定Topic的所有Partition信息</span></span><br><span class="line">            <span class="keyword">for</span> (PartitionInfo partitionInfo : partitionInfos) &#123;</span><br><span class="line">                <span class="comment">// 若当前Partition是指定的Partition,则保存此Partition的Replication并将其Leader返回</span></span><br><span class="line">                <span class="keyword">if</span> (partitionInfo.partition() == partition) &#123;</span><br><span class="line">                    <span class="comment">/*// 保存指定Partition的所有副本</span></span><br><span class="line"><span class="comment">                    replications = partitionInfo.replicas();*/</span></span><br><span class="line">                    <span class="comment">// 6.返回指定的TopicPartition对应的Leader</span></span><br><span class="line">                    <span class="keyword">return</span> partitionInfo.leader();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (kafkaConsumer != <span class="keyword">null</span>) kafkaConsumer.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有找到Leader则返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;kafka版本：2.11-2.1.1&lt;/li&gt;
&lt;li&gt;基于Kafka Java API&lt;/li&gt;
&lt;li&gt;主要是通过封装&lt;code&gt;Consumer.partitionsFor&lt;/code&gt;方法实现此功能&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Kafka" scheme="https://tomandersen-cc.github.io/categories/Kafka/"/>
    
    
      <category term="Java" scheme="https://tomandersen-cc.github.io/tags/Java/"/>
    
      <category term="Kafka" scheme="https://tomandersen-cc.github.io/tags/Kafka/"/>
    
      <category term="Practice" scheme="https://tomandersen-cc.github.io/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>Kafka之获取指定Topic-Partition的lastOffset</title>
    <link href="https://tomandersen-cc.github.io/2020/03/17/Kafka%E4%B9%8B%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9ATopic-Partition%E7%9A%84lastOffset/"/>
    <id>https://tomandersen-cc.github.io/2020/03/17/Kafka%E4%B9%8B%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9ATopic-Partition%E7%9A%84lastOffset/</id>
    <published>2020-03-17T13:46:17.000Z</published>
    <updated>2020-03-17T13:49:07.240Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>kafka版本：2.11-2.1.1</li><li>基于Kafka Java API</li><li>主要是通过封装<code>Conusmer.endOffsets</code>方法实现此功能</li></ul><a id="more"></a><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;根据指定的Topic-Partition获取对应的endOffset.</span></span><br><span class="line"><span class="comment">     * 主要是封装了KafkaConsumer的&#123;<span class="doctag">@link</span> KafkaConsumer#endOffsets&#125;方法.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;endOffsets Javadoc:</span></span><br><span class="line"><span class="comment">     * Get the end offsets for the given partitions. In the default &#123;<span class="doctag">@code</span> read_uncommitted&#125; isolation level, the end</span></span><br><span class="line"><span class="comment">     * offset is the high watermark (that is, the offset of the last successfully replicated message plus one). For</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> read_committed&#125; consumers, the end offset is the last stable offset (LSO), which is the minimum of</span></span><br><span class="line"><span class="comment">     * the high watermark and the smallest offset of any open transaction. Finally, if the partition has never been</span></span><br><span class="line"><span class="comment">     * written to, the end offset is 0.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> brokers   指定的Kafka集群</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic     指定的Topic</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> partition 指定的Partition ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> TopicPartition对应最新消息的Offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/3/17</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> KafkaConsumer#endOffsets</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getLastOffset</span><span class="params">(Map&lt;String, Integer&gt; brokers, String topic, <span class="keyword">int</span> partition)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.配置Consumer</span></span><br><span class="line">        <span class="comment">// 通过接收到的配置信息创建KafkaConsumer实例</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">for</span> (String broker : brokers.keySet()) &#123;</span><br><span class="line">            props.put(<span class="string">"bootstrap.servers"</span>,</span><br><span class="line">                    broker + <span class="string">":"</span> + brokers.getOrDefault(broker, <span class="number">9092</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 指定Consumer所属的ConsumerGroup</span></span><br><span class="line">        props.put(<span class="string">"group.id"</span>, <span class="string">"test"</span>);</span><br><span class="line">        <span class="comment">// 设置手动提交Offset,由于只是获取部分数据所以不需要自动提交Offset</span></span><br><span class="line">        props.put(<span class="string">"enable.auto.commit"</span>, <span class="string">"false"</span>);</span><br><span class="line">        <span class="comment">// 设置键值对&lt;K,V&gt;反序列化器,直接使用String对象反序列化器</span></span><br><span class="line">        props.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        props.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.定义消费者KafkaConsumer对象</span></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 3.创建TopicPartition实例</span></span><br><span class="line">        TopicPartition topicPartition = <span class="keyword">new</span> TopicPartition(topic, partition);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 4.创建kafkaTopic实例</span></span><br><span class="line">            kafkaConsumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line">            <span class="comment">// 5.通过Consumer.endOffsets(Collections&lt;TopicPartition&gt;)方法获取</span></span><br><span class="line">            <span class="comment">// 指定TopicPartition对应的lastOffset</span></span><br><span class="line">            Map offsets = kafkaConsumer.endOffsets(</span><br><span class="line">                    Collections.singletonList(topicPartition));</span><br><span class="line">            <span class="comment">// 6.返回对应Partition的Offset,如果不存在则直接返回0</span></span><br><span class="line">            <span class="keyword">return</span> (Long) offsets.getOrDefault(topicPartition, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (kafkaConsumer != <span class="keyword">null</span>) kafkaConsumer.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取lastOffset失败则返回-1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;kafka版本：2.11-2.1.1&lt;/li&gt;
&lt;li&gt;基于Kafka Java API&lt;/li&gt;
&lt;li&gt;主要是通过封装&lt;code&gt;Conusmer.endOffsets&lt;/code&gt;方法实现此功能&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Kafka" scheme="https://tomandersen-cc.github.io/categories/Kafka/"/>
    
    
      <category term="Java" scheme="https://tomandersen-cc.github.io/tags/Java/"/>
    
      <category term="Kafka" scheme="https://tomandersen-cc.github.io/tags/Kafka/"/>
    
      <category term="Practice" scheme="https://tomandersen-cc.github.io/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>Kafka之读取指定Topic-Partition-Offset之后的消息</title>
    <link href="https://tomandersen-cc.github.io/2020/03/17/Kafka%E4%B9%8B%E8%AF%BB%E5%8F%96%E6%8C%87%E5%AE%9ATopic-Partition-Offset%E4%B9%8B%E5%90%8E%E7%9A%84%E6%B6%88%E6%81%AF/"/>
    <id>https://tomandersen-cc.github.io/2020/03/17/Kafka%E4%B9%8B%E8%AF%BB%E5%8F%96%E6%8C%87%E5%AE%9ATopic-Partition-Offset%E4%B9%8B%E5%90%8E%E7%9A%84%E6%B6%88%E6%81%AF/</id>
    <published>2020-03-17T13:46:17.000Z</published>
    <updated>2020-03-17T13:48:00.062Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>kafka版本：2.11-2.1.1</li><li>基于Kafka Java API</li><li>主要是通过封装<code>Conusmer.assign</code>和<code>Consumer.seek</code>方法实现此功能。前者的作用是将指定Topic-Partition分配给对应的Consumer，后者的作用是将Consumer在指定的Topic-Partition中的Offset置于指定位置</li></ul><a id="more"></a><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;主要用于从指定的Topic-Partition-Offset读取指定数量的消息.</span></span><br><span class="line"><span class="comment">     * 主要是用于获取部分数据,而不是持续消费数据.主要是封装了&#123;<span class="doctag">@link</span> KafkaConsumer#assign&#125;</span></span><br><span class="line"><span class="comment">     * 和&#123;<span class="doctag">@link</span> KafkaConsumer#seek&#125;方法.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> brokers     指定的Kafka集群</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic       指定消费的Topic</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> partition   指定消费的Partition ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beginOffset 指定开始消费的Offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeInMills 指定消费的时长</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxReads    指定消费的最大消息数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/3/17</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;ConsumerRecord&gt; <span class="title">getRecordsFrom</span><span class="params">(Map&lt;String, Integer&gt; brokers, String topic, <span class="keyword">int</span> partition, <span class="keyword">long</span> beginOffset, <span class="keyword">long</span> timeInMills, <span class="keyword">long</span> maxReads)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.通过接收到的配置信息创建KafkaConsumer实例</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">for</span> (String broker : brokers.keySet()) &#123;</span><br><span class="line">            props.put(<span class="string">"bootstrap.servers"</span>,</span><br><span class="line">                    broker + <span class="string">":"</span> + brokers.getOrDefault(broker, <span class="number">9092</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置手动提交Offset,由于只是获取部分数据所以不需要自动提交Offset</span></span><br><span class="line">        props.put(<span class="string">"enable.auto.commit"</span>, <span class="string">"false"</span>);</span><br><span class="line">        <span class="comment">// 设置键值对&lt;K,V&gt;反序列化器,因为都是String类型,所以使用String对象反序列化器</span></span><br><span class="line">        props.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        props.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.定义KafkaConsumer对象,以及创建用于返回的ConsumerRecord集合</span></span><br><span class="line">        KafkaConsumer&lt;Object, Object&gt; kafkaConsumer = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;ConsumerRecord&gt; recordList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3.创建KafkaConsumer实例</span></span><br><span class="line">            kafkaConsumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line">            <span class="comment">// 4.创建TopicPartition实例</span></span><br><span class="line">            TopicPartition topicPartition = <span class="keyword">new</span> TopicPartition(topic, partition);</span><br><span class="line">            <span class="comment">// 5.给Consumer指定消费的Topic和Partition(十分重要)</span></span><br><span class="line">            <span class="comment">// 如果无对应topic或者partition,则会抛出异常IllegalArgumentException</span></span><br><span class="line">            <span class="comment">// 如果此consumer之前已经有过订阅行为且未解除之前所有的订阅,则会抛出异常IllegalStateException</span></span><br><span class="line">            kafkaConsumer.assign(Collections.singletonList(topicPartition));</span><br><span class="line">            <span class="comment">// 6.覆盖原始的Consumer-Topic-Partition对应的Offset,将其设置为指定Offset值</span></span><br><span class="line">            kafkaConsumer.seek(topicPartition, beginOffset);</span><br><span class="line">            <span class="comment">// 7.获取消息</span></span><br><span class="line">            ConsumerRecords&lt;Object, Object&gt; consumerRecords =</span><br><span class="line">                    kafkaConsumer.poll(Duration.ofMillis(timeInMills));</span><br><span class="line">            <span class="comment">// 8.处理消息</span></span><br><span class="line">            <span class="comment">// 将Consumer获取到的消息保存在集合中准备返回</span></span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord record : consumerRecords) &#123;</span><br><span class="line">                <span class="comment">// 如果已经读完最多消息限制则直接跳出循环</span></span><br><span class="line">                <span class="keyword">if</span> (recordList.size() == maxReads) <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 如果还需要读取则继续读取</span></span><br><span class="line">                recordList.add(record);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 9.释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (kafkaConsumer != <span class="keyword">null</span>) kafkaConsumer.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> recordList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;kafka版本：2.11-2.1.1&lt;/li&gt;
&lt;li&gt;基于Kafka Java API&lt;/li&gt;
&lt;li&gt;主要是通过封装&lt;code&gt;Conusmer.assign&lt;/code&gt;和&lt;code&gt;Consumer.seek&lt;/code&gt;方法实现此功能。前者的作用是将指定Topic-Partition分配给对应的Consumer，后者的作用是将Consumer在指定的Topic-Partition中的Offset置于指定位置&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Kafka" scheme="https://tomandersen-cc.github.io/categories/Kafka/"/>
    
    
      <category term="Java" scheme="https://tomandersen-cc.github.io/tags/Java/"/>
    
      <category term="Kafka" scheme="https://tomandersen-cc.github.io/tags/Kafka/"/>
    
      <category term="Practice" scheme="https://tomandersen-cc.github.io/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>SSH连接服务器时出现Permission denied (publickey,gssapi-keyex,gssapi-with-mic)</title>
    <link href="https://tomandersen-cc.github.io/2020/03/15/SSH%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E5%87%BA%E7%8E%B0Permission%20denied%20(publickey,gssapi-keyex,gssapi-with-mic)/"/>
    <id>https://tomandersen-cc.github.io/2020/03/15/SSH%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E5%87%BA%E7%8E%B0Permission%20denied%20(publickey,gssapi-keyex,gssapi-with-mic)/</id>
    <published>2020-03-15T00:04:49.000Z</published>
    <updated>2020-03-17T13:55:26.744Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SSH工具连接服务器的身份验证方式有两种，一种是基于口令的身份验证，一种是基于密钥的身份认证。当你直接使用SSH工具连接服务器时，SSH首先会在<code>~/.ssh/</code>路径下按照默认的密钥（私钥）文件名（如id_rsa）查找对应的密钥并尝试使用本地的私钥去配对服务器端的公钥，如果配对成功则不需要进行密码验证（这也是通常实现SSH免密登录的原理），如果配对失败则尝试使用密码验证的方式进行身份验证。但是如果ssh配置文件中关闭了密码验证，那么当密钥无法配对成功时，就会报如题的错误。同样的如果在没有开启密码验证的时候，尝试使用<code>ssh-copy-id</code>，也会报此错误。</p><a id="more"></a><hr><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1）使用对应私钥连接服务端"><a href="#1）使用对应私钥连接服务端" class="headerlink" title="1）使用对应私钥连接服务端"></a>1）使用对应私钥连接服务端</h3><p><strong>命令格式如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &lt;remote_username&gt;@&lt;remote_ip&gt; -i &lt;your_local_private_key&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh admin@114.67.40.28 -i /home/tom/id_rsa</span><br></pre></td></tr></table></figure><p><strong>注意：如果是在Windows平台下使用Git Bash，则默认密钥（私钥）一般存放在<code>C:\Users\&lt;your_account&gt;\.ssh</code>目录下。如果没有对应私钥是没有办法连接到远端的。</strong></p><h3 id="2）修改SSH配置文件"><a href="#2）修改SSH配置文件" class="headerlink" title="2）修改SSH配置文件"></a>2）修改SSH配置文件</h3><p><strong>修改/etc/ssh/sshd_config：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p><strong>将PasswordAuthentication设置成为yes（一般在文件的末尾几行）：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#X11Forwarding no</span></span><br><span class="line"><span class="comment">#AllowTcpForwarding no</span></span><br><span class="line"><span class="comment">#PermitTTY no</span></span><br><span class="line"><span class="comment">#ForceCommand cvs server</span></span><br><span class="line">UseDNS no</span><br><span class="line">AddressFamily inet</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">SyslogFacility AUTHPRIV</span><br><span class="line"><span class="comment">#PasswordAuthentication no</span></span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure><p><strong>注意：不是修改<code>/etc/ssh/ssh_config</code>文件</strong></p><h3 id="3）使用密码登录"><a href="#3）使用密码登录" class="headerlink" title="3）使用密码登录"></a>3）使用密码登录</h3><p><strong>修改配置之后就可以正常使用密码的方式进行身份验证登录服务器了</strong></p><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;SSH工具连接服务器的身份验证方式有两种，一种是基于口令的身份验证，一种是基于密钥的身份认证。当你直接使用SSH工具连接服务器时，SSH首先会在&lt;code&gt;~/.ssh/&lt;/code&gt;路径下按照默认的密钥（私钥）文件名（如id_rsa）查找对应的密钥并尝试使用本地的私钥去配对服务器端的公钥，如果配对成功则不需要进行密码验证（这也是通常实现SSH免密登录的原理），如果配对失败则尝试使用密码验证的方式进行身份验证。但是如果ssh配置文件中关闭了密码验证，那么当密钥无法配对成功时，就会报如题的错误。同样的如果在没有开启密码验证的时候，尝试使用&lt;code&gt;ssh-copy-id&lt;/code&gt;，也会报此错误。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Shell" scheme="https://tomandersen-cc.github.io/categories/Shell/"/>
    
    
      <category term="Linux" scheme="https://tomandersen-cc.github.io/tags/Linux/"/>
    
      <category term="Shell" scheme="https://tomandersen-cc.github.io/tags/Shell/"/>
    
      <category term="ssh" scheme="https://tomandersen-cc.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Shell之使用ssh工具在远端执行多条命令</title>
    <link href="https://tomandersen-cc.github.io/2020/03/15/Shell%E4%B9%8B%E4%BD%BF%E7%94%A8ssh%E5%B7%A5%E5%85%B7%E5%9C%A8%E8%BF%9C%E7%AB%AF%E6%89%A7%E8%A1%8C%E5%A4%9A%E6%9D%A1%E5%91%BD%E4%BB%A4/"/>
    <id>https://tomandersen-cc.github.io/2020/03/15/Shell%E4%B9%8B%E4%BD%BF%E7%94%A8ssh%E5%B7%A5%E5%85%B7%E5%9C%A8%E8%BF%9C%E7%AB%AF%E6%89%A7%E8%A1%8C%E5%A4%9A%E6%9D%A1%E5%91%BD%E4%BB%A4/</id>
    <published>2020-03-15T00:03:15.000Z</published>
    <updated>2020-03-17T13:55:18.618Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p><strong>①多行命令使用双引号或者首尾定界符来囊括，当使用双引号囊括时，若其中同时也使用了双引号就需要使用转义字符对远程执行命令中的引号进行转义。所以如果远程命令本身包含双引号，建议还是使用首尾定界符，首尾定界符是一个自定义的字符串，可以自定义内容，并且命令结尾处的首尾定界符需要放置于当前行行首</strong></p></li><li><p><strong>②如果远程执行命令中的美元符号<code>$</code>读取的是远程终端的变量，而非当前终端的变量就需要增加转义字符来将此美元符号转义，即定义为读取远程终端中设置的变量</strong></p></li></ul><a id="more"></a><hr><h2 id="脚本示例"><a href="#脚本示例" class="headerlink" title="脚本示例"></a>脚本示例</h2><h3 id="示例1：使用双引号"><a href="#示例1：使用双引号" class="headerlink" title="示例1：使用双引号"></a>示例1：使用双引号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 此脚本用于测试ssh工具远程执行多条命令方式</span></span><br><span class="line"><span class="comment"># 使用的前提是已经设置密钥对并以默认私钥文件名存放在默认路径~/.ssh/下(即ssh免密登录)</span></span><br><span class="line"><span class="comment"># 或者使用-i参数手动指定私钥位置</span></span><br><span class="line"></span><br><span class="line">host=192.168.126.101</span><br><span class="line"></span><br><span class="line">ssh tomandersen@<span class="variable">$host</span> <span class="string">"</span></span><br><span class="line"><span class="string">source /etc/profile</span></span><br><span class="line"><span class="string">echo \$JAVA_HOME</span></span><br><span class="line"><span class="string">echo 'this is a test!'</span></span><br><span class="line"><span class="string">"</span></span><br></pre></td></tr></table></figure><p><strong>注意：每行结尾不加分号<code>;</code>，若远程执行的多行命令中存在使用<code>双引号&quot;&quot;</code>或者<code>美元符号$</code>的情况，需要使用<code>转义字符\</code>进行转义，前者是因为双引号在本示例中是作为首位定界符只能出现在命令头尾，后者是因为不给美元符号附上转义字符时是默认读取本地变量。同理也可以使用单引号</strong></p><hr><h3 id="示例2：使用首尾定界符"><a href="#示例2：使用首尾定界符" class="headerlink" title="示例2：使用首尾定界符"></a>示例2：使用首尾定界符</h3><p><strong>首尾定界符是用于圈定命令的字符串，字符串内容可以自己定义，如常用的EOF，甚至命名为TEST都行。配合使用输入从定向&lt;&lt;，能够将其圈定的内容作为命令参数输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 此脚本用于测试ssh工具远程执行多条命令方式</span></span><br><span class="line"><span class="comment"># 使用的前提是已经设置密钥对并以默认私钥文件名存放在默认路径~/.ssh/下(即ssh免密登录)</span></span><br><span class="line"><span class="comment"># 或者使用-i参数手动指定私钥位置</span></span><br><span class="line"></span><br><span class="line">host=192.168.126.101</span><br><span class="line"></span><br><span class="line">ssh tomandersen@<span class="variable">$host</span> &lt;&lt; EOF</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="built_in">echo</span> \<span class="variable">$JAVA_HOME</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'this is a test!'</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><strong>注意：首尾定界符的结尾符号需要写在行首，否则会报错</strong></p><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;①多行命令使用双引号或者首尾定界符来囊括，当使用双引号囊括时，若其中同时也使用了双引号就需要使用转义字符对远程执行命令中的引号进行转义。所以如果远程命令本身包含双引号，建议还是使用首尾定界符，首尾定界符是一个自定义的字符串，可以自定义内容，并且命令结尾处的首尾定界符需要放置于当前行行首&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;②如果远程执行命令中的美元符号&lt;code&gt;$&lt;/code&gt;读取的是远程终端的变量，而非当前终端的变量就需要增加转义字符来将此美元符号转义，即定义为读取远程终端中设置的变量&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Shell" scheme="https://tomandersen-cc.github.io/categories/Shell/"/>
    
    
      <category term="Linux" scheme="https://tomandersen-cc.github.io/tags/Linux/"/>
    
      <category term="Shell" scheme="https://tomandersen-cc.github.io/tags/Shell/"/>
    
      <category term="ssh" scheme="https://tomandersen-cc.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Kafka之入门级安装部署</title>
    <link href="https://tomandersen-cc.github.io/2020/03/15/Kafka%E4%B9%8B%E5%85%A5%E9%97%A8%E7%BA%A7%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <id>https://tomandersen-cc.github.io/2020/03/15/Kafka%E4%B9%8B%E5%85%A5%E9%97%A8%E7%BA%A7%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</id>
    <published>2020-03-15T00:01:13.000Z</published>
    <updated>2020-03-17T13:55:42.028Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="1-下载Kafka安装包"><a href="#1-下载Kafka安装包" class="headerlink" title="1. 下载Kafka安装包"></a>1. 下载Kafka安装包</h2><p><a href="http://archive.apache.org/dist/" target="_blank" rel="noopener">Apache所有项目历史版本镜像地址</a></p><p><a href="http://archive.apache.org/dist/kafka/" target="_blank" rel="noopener">Apache Kafka下载地址</a></p><a id="more"></a><hr><h2 id="2-解压到指定路径下"><a href="#2-解压到指定路径下" class="headerlink" title="2. 解压到指定路径下"></a>2. 解压到指定路径下</h2><p><strong>本次安装的Kafka为2.1.1版本，注意：压缩包前面的版本号为Scala版本号，而后面的才是Kafka版本号</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf kafka_2.11-2.1.1.tgz -C /opt/module/</span><br></pre></td></tr></table></figure><hr><h2 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h2><p><strong>通过修改<code>/etc/profile</code>文件设置KAFKA_HOME环境变量，并将bin目录增加到PATH环境变量中</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p><strong>添加以下内容</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set $KAFKA_HOME</span></span><br><span class="line"><span class="built_in">export</span> KAFKA_HOME=/opt/module/kafka_2.11-2.1.1</span><br><span class="line"><span class="comment"># Add $KAFKA_HOME/bin to PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$KAFKA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p><strong>重新加载profile文件，验证环境变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$KAFKA_HOME</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-修改配置文件config-server-properties"><a href="#4-修改配置文件config-server-properties" class="headerlink" title="4. 修改配置文件config/server.properties"></a>4. 修改配置文件<code>config/server.properties</code></h2><h3 id="1）设置Broker-ID"><a href="#1）设置Broker-ID" class="headerlink" title="1）设置Broker ID"></a>1）设置Broker ID</h3><p><strong>Kafka集群中每个主机即Broker的ID必须不同</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The id of the broker. This must be set to a unique integer for each broker.</span></span><br><span class="line">broker.id=0</span><br></pre></td></tr></table></figure><h3 id="2）设置Kafka日志以及数据存放路径"><a href="#2）设置Kafka日志以及数据存放路径" class="headerlink" title="2）设置Kafka日志以及数据存放路径"></a>2）设置Kafka日志以及数据存放路径</h3><p><strong>此路径设置的日志和数据的共同存储路径，即各种Partition的数据也存储在此路径下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.dirs=/opt/module/kafka_2.11-2.1.1/logs</span><br></pre></td></tr></table></figure><h3 id="3）开启管理工具的删除Topic功能"><a href="#3）开启管理工具的删除Topic功能" class="headerlink" title="3）开启管理工具的删除Topic功能"></a>3）开启管理工具的删除Topic功能</h3><p><strong>如果不开启开启此功能，那么使用命令行删除Topic时只会是标记删除，实际上并未删除，当再次创建同名Topic时就会报错无法创建</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete.topic.enable=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="4）配置Zookeeper集群"><a href="#4）配置Zookeeper集群" class="headerlink" title="4）配置Zookeeper集群"></a>4）配置Zookeeper集群</h3><p><strong>Zookeeper服务器集群的客户端端口要与Zookeeper中配置的端口一致</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zookeeper.connect=zkServer1:2181,zkServer2.2181,zkServer3.2181</span><br></pre></td></tr></table></figure><h3 id="5）具体配置"><a href="#5）具体配置" class="headerlink" title="5）具体配置"></a>5）具体配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#broker的全局唯一编号，不能重复</span></span><br><span class="line">broker.id=1</span><br><span class="line"><span class="comment">#删除topic功能使能</span></span><br><span class="line">delete.topic.enable=<span class="literal">true</span></span><br><span class="line"><span class="comment">#处理网络请求的线程数量</span></span><br><span class="line">num.network.threads=3</span><br><span class="line"><span class="comment">#用来处理磁盘IO的现成数量</span></span><br><span class="line">num.io.threads=8</span><br><span class="line"><span class="comment">#发送套接字的缓冲区大小</span></span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line"><span class="comment">#接收套接字的缓冲区大小</span></span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line"><span class="comment">#请求套接字的缓冲区大小</span></span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line"><span class="comment">#kafka运行日志存放的路径</span></span><br><span class="line">log.dirs=/opt/module/kafka_2.11-2.1.1/logs</span><br><span class="line"><span class="comment">#topic在当前broker上的分区个数</span></span><br><span class="line">num.partitions=1</span><br><span class="line"><span class="comment">#用来恢复和清理data下数据的线程数量</span></span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line"><span class="comment">#segment文件保留的最长时间，超时将被删除</span></span><br><span class="line">log.retention.hours=168</span><br><span class="line"><span class="comment">#log segment滚动条件:文件大小</span></span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line"><span class="comment">#周期性检查log segment文件是否可以删除</span></span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line"><span class="comment">#配置连接Zookeeper集群地址</span></span><br><span class="line">zookeeper.connect=hadoop102:2181,hadoop103:2181,hadoop104:2181</span><br><span class="line"><span class="comment">#zookeeper连接认定超时时间</span></span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br><span class="line"><span class="comment">#设置rebalance的延迟时间</span></span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br></pre></td></tr></table></figure><h3 id="6）测试"><a href="#6）测试" class="headerlink" title="6）测试"></a>6）测试</h3><p><strong>启动当前主机Kafka</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh config/server.properties</span><br></pre></td></tr></table></figure><p><strong>关闭当前主机Kafka</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-stop.sh</span><br></pre></td></tr></table></figure><h3 id="7）将Kafka分发给其他主机并修改对应的Broker-ID即可"><a href="#7）将Kafka分发给其他主机并修改对应的Broker-ID即可" class="headerlink" title="7）将Kafka分发给其他主机并修改对应的Broker ID即可"></a>7）将Kafka分发给其他主机并修改对应的Broker ID即可</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /opt/module/kafka_2.11-2.1.1 hadoop102:/opt/module/</span><br><span class="line">scp -r /opt/module/kafka_2.11-2.1.1 hadoop103:/opt/module/</span><br></pre></td></tr></table></figure><h3 id="8）编写脚本控制Kafka集群"><a href="#8）编写脚本控制Kafka集群" class="headerlink" title="8）编写脚本控制Kafka集群"></a>8）编写脚本控制Kafka集群</h3><p><strong>编写Kafka群起脚本，通过脚本控制Kafka集群。此处提供脚本模板，仅供参考，具体使用之前记得更改Kafka安装路径，以及实现主机间ssh免密登录或者更改ssh命令指定每次连接时使用的私钥</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此脚本用于启动/停止Kafka集群</span></span><br><span class="line"><span class="comment"># 输入的参数只能为start/stop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断参数个数</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="variable">$#</span> &gt; 1)); <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Wrongs parameters!"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间(相对时间)</span></span><br><span class="line">start_time=$(date +%s)</span><br><span class="line"><span class="comment"># 获取操作方式</span></span><br><span class="line">operation=<span class="variable">$1</span></span><br><span class="line"><span class="comment"># 设置Kafka集群</span></span><br><span class="line">cluster=<span class="variable">$&#123;KAFKA_CLUSTER:-"hadoop101 hadoop102 hadoop103"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对kafka集群进行对应的操作</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$operation</span>"</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"----------Starting kafka cluster----------"</span></span><br><span class="line">    <span class="keyword">for</span> host <span class="keyword">in</span> <span class="variable">$cluster</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"----------Starting kafka in [<span class="variable">$host</span>]----------"</span></span><br><span class="line">        ssh <span class="variable">$host</span> <span class="string">"source /etc/profile;</span></span><br><span class="line"><span class="string">        KAFKA_HOME=\$&#123;KAFKA_HOME:-'/opt/module/kafka_2.11-2.1.1'&#125;;</span></span><br><span class="line"><span class="string">        cd \$KAFKA_HOME;</span></span><br><span class="line"><span class="string">        nohup ./bin/kafka-server-start.sh config/server.properties &gt; /dev/null 2&gt;&amp;1 &amp;</span></span><br><span class="line"><span class="string">        "</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    ;;</span><br><span class="line">stop)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"----------Stopping kafka cluster----------"</span></span><br><span class="line">    <span class="keyword">for</span> host <span class="keyword">in</span> <span class="variable">$cluster</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"----------Starting kafka in [<span class="variable">$host</span>]----------"</span></span><br><span class="line">        ssh <span class="variable">$host</span> <span class="string">"source /etc/profile;</span></span><br><span class="line"><span class="string">        KAFKA_HOME=\$&#123;KAFKA_HOME:-'/opt/module/kafka_2.11-2.1.1'&#125;;</span></span><br><span class="line"><span class="string">        cd \$KAFKA_HOME;</span></span><br><span class="line"><span class="string">        ./bin/kafka-server-stop.sh</span></span><br><span class="line"><span class="string">        "</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Worong Parameter!"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取结束时间</span></span><br><span class="line">end_time=$(date +%s)</span><br><span class="line">execution_time=$((<span class="variable">$&#123;end_time&#125;</span> - <span class="variable">$&#123;start_time&#125;</span>))</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\n----------<span class="variable">$operation</span> kafka in [<span class="variable">$cluster</span>] takes <span class="variable">$&#123;execution_time&#125;</span> seconds----------\n"</span></span><br></pre></td></tr></table></figure><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;1-下载Kafka安装包&quot;&gt;&lt;a href=&quot;#1-下载Kafka安装包&quot; class=&quot;headerlink&quot; title=&quot;1. 下载Kafka安装包&quot;&gt;&lt;/a&gt;1. 下载Kafka安装包&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://archive.apache.org/dist/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache所有项目历史版本镜像地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://archive.apache.org/dist/kafka/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache Kafka下载地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kafka" scheme="https://tomandersen-cc.github.io/categories/Kafka/"/>
    
    
      <category term="Linux" scheme="https://tomandersen-cc.github.io/tags/Linux/"/>
    
      <category term="Kafka" scheme="https://tomandersen-cc.github.io/tags/Kafka/"/>
    
      <category term="Shell" scheme="https://tomandersen-cc.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Kafka之命令行的基本操作</title>
    <link href="https://tomandersen-cc.github.io/2020/03/15/Kafka%E4%B9%8B%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://tomandersen-cc.github.io/2020/03/15/Kafka%E4%B9%8B%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2020-03-15T00:00:04.000Z</published>
    <updated>2020-03-17T13:51:24.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>kafka版本：2.11-2.1.1</li></ul><a id="more"></a><hr><h2 id="1-启动-关闭Kafka"><a href="#1-启动-关闭Kafka" class="headerlink" title="1. 启动/关闭Kafka"></a>1. 启动/关闭Kafka</h2><p><strong>注意：在启动Kafka进程之前记得先启动Zookeeper集群</strong></p><p><strong>启动当前主机Kafka进程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh config/server.properties</span><br></pre></td></tr></table></figure><p><strong>可以使用<code>-daemon</code>参数，表示以守护线程的方式启动，日志不打印到控制台</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure><p><strong>关闭当前主机Kafka进程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-stop.sh</span><br></pre></td></tr></table></figure><h2 id="2-查看所有Topic信息"><a href="#2-查看所有Topic信息" class="headerlink" title="2. 查看所有Topic信息"></a>2. 查看所有Topic信息</h2><p><strong>需要指定Zookeeper集群和其提供的客户端端口号。如果想尝试使用多个Zookeeper服务器，各个服务器之间使用逗号隔开</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --zookeeper zkServer1:2181,zkServer2:2181 --list</span><br></pre></td></tr></table></figure><h2 id="3-创建Topic"><a href="#3-创建Topic" class="headerlink" title="3. 创建Topic"></a>3. 创建Topic</h2><p><strong>向Zookeeper服务器集群注册Topic</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --zookeeper zkServer1:2181 --create --replication-factor 3 --partitions 1 --topic first</span><br></pre></td></tr></table></figure><p><strong>注意：自Kafka 2.2.x及之后都是向Kafka集群注册Topic，而不是直接向Zookeeper注册Tpoic，所以命令行有所不同，将Zookeeper集群改成指定Kafka集群及其客户端端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 3 --partitions 1 --topic first</span><br></pre></td></tr></table></figure><h2 id="4-删除Topic"><a href="#4-删除Topic" class="headerlink" title="4. 删除Topic"></a>4. 删除Topic</h2><p><strong>需要server.properties中设置<code>delete.topic.enable=true</code>，否则只是标记删除而实际未删除，会导致再次创建同名Topic时失败</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --zookeeper zkServer1:2181 --delete --topic first</span><br></pre></td></tr></table></figure><h2 id="5-生产消息"><a href="#5-生产消息" class="headerlink" title="5. 生产消息"></a>5. 生产消息</h2><p><strong>启动生产者进程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic first</span><br></pre></td></tr></table></figure><h2 id="6-消费消息"><a href="#6-消费消息" class="headerlink" title="6. 消费消息"></a>6. 消费消息</h2><p><strong>启动消费者进程，实时消费Topic中的最新消息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic first</span><br></pre></td></tr></table></figure><p><strong>加上<code>from-beginning</code>则是将Topic中已保存的历史消息全部取出</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic first</span><br></pre></td></tr></table></figure><p><strong>注意1：如果使用了多个Partition，取出的消息只能保证单个Partition中的消息有序，多个Partition之间消息是不保证有序的</strong></p><p><strong>注意2：在Kafka 0.8.1及之前，Consumer消费分区消息的offset偏移量也通过Zookeeper来保存，在此版本之后就不建议或者禁止使用zk来保存offset。在Kafka 0.8.2及之后，Kafka通过建立一个Internal Topic即内部Topic来保存Consumer Offset信息（topic名为_consumer_offset），同样存储在log.dirs路径下。因此Kafka 0.8.2及之后是通过指定Kafka集群来消费消息，而Kafka 0.8.1及之前是通过指定Zookeeper集群来消费消息</strong></p><h2 id="7-查看指定Topic具体信息"><a href="#7-查看指定Topic具体信息" class="headerlink" title="7. 查看指定Topic具体信息"></a>7. 查看指定Topic具体信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --zookeeper zkServer1:2181 --describe --topic first</span><br></pre></td></tr></table></figure><p><strong>其中<code>ISR</code>表示已经和Partition Leader实现同步的Partition副本（in-sync replication）</strong></p><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;kafka版本：2.11-2.1.1&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Kafka" scheme="https://tomandersen-cc.github.io/categories/Kafka/"/>
    
    
      <category term="Kafka" scheme="https://tomandersen-cc.github.io/tags/Kafka/"/>
    
      <category term="Shell" scheme="https://tomandersen-cc.github.io/tags/Shell/"/>
    
      <category term="Practice" scheme="https://tomandersen-cc.github.io/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>Hexo之NexT主题设置背景图片</title>
    <link href="https://tomandersen-cc.github.io/2020/03/15/Hexo%E4%B9%8BNexT%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/"/>
    <id>https://tomandersen-cc.github.io/2020/03/15/Hexo%E4%B9%8BNexT%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/</id>
    <published>2020-03-14T23:58:04.000Z</published>
    <updated>2020-03-17T13:52:09.058Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><strong>Hexo版本</strong>：4.2.0</li><li><strong>NexT版本</strong>：7.7.1</li><li><strong>GitHub</strong>：<a href="https://github.com/theme-next/theme-next-pace" target="_blank" rel="noopener">theme-next-pace</a></li></ul><a id="more"></a><hr><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><h3 id="1）修改NexT配置文件"><a href="#1）修改NexT配置文件" class="headerlink" title="1）修改NexT配置文件"></a>1）修改NexT配置文件</h3><p>在NexT的配置文件中的<code>custom_file_path</code>参数下设置CSS样式文件<code>style.styl</code>的存储路径，我们可以在此文件中自定义使用自己的各种样式，此路径必须在Hexo根目录source文件夹下，建议设置成默认路径<code>source/_data/style.styl</code>，然后在对应路径下创建对应的<code>style.styl</code>文件。</p><h3 id="2）配置style-styl文件"><a href="#2）配置style-styl文件" class="headerlink" title="2）配置style.styl文件"></a>2）配置style.styl文件</h3><p><strong>此脚本内容遵循CSS语法，以下是配置示例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line">// 整体背景设置</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"> background:url(/images/adrian-Xft-JdC-Jbc-unsplash.jpg);// 设定背景图片,images同处于source文件夹下</span><br><span class="line"> background-repeat: no-repeat;// 设定背景图片非重复填充</span><br><span class="line">    background-attachment:fixed;// 设置背景图片不随页面滚动</span><br><span class="line">    background-position:50% 50%;// 设置背景图片位置</span><br><span class="line">background-size: cover// 设置保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 页面头样式属性</span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  // 也可以同时定义背景色</span><br><span class="line">  // background: #ddd </span><br><span class="line">  // 透明度</span><br><span class="line">  // opacity: 0.8;</span><br><span class="line">&#125;</span><br><span class="line">// sidebar侧边工具栏样式属性</span><br><span class="line"><span class="selector-class">.sidebar</span>&#123;</span><br><span class="line">    // 动画过渡时间</span><br><span class="line"><span class="selector-tag">transition-duration</span>: 0<span class="selector-class">.4s</span>;</span><br><span class="line">    // 透明度</span><br><span class="line"><span class="selector-tag">opacity</span>: 0<span class="selector-class">.8</span></span><br><span class="line">&#125;</span><br><span class="line">// 标题样式</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-title-link</span> &#123;</span><br><span class="line">// 设置字体颜色</span><br><span class="line"><span class="selector-tag">color</span>: <span class="selector-id">#222</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 文章版块样式</span><br><span class="line"><span class="selector-class">.post-block</span> &#123;</span><br><span class="line">    //background: var(--content-bg-color);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#fff</span></span><br><span class="line">    <span class="selector-tag">border-radius</span>: <span class="selector-tag">initial</span>;</span><br><span class="line">    <span class="selector-tag">box-shadow</span>: 0 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.12</span>), 0 3<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-tag">-2px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.06</span>), 0 1<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.12</span>);</span><br><span class="line">    <span class="selector-tag">padding</span>: 40<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）重新生成Hexo博客"><a href="#3）重新生成Hexo博客" class="headerlink" title="3）重新生成Hexo博客"></a>3）重新生成Hexo博客</h3><p><strong>重新生成Hexo博客，并验证配置结果</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><h3 id="4）More"><a href="#4）More" class="headerlink" title="4）More"></a>4）More</h3><p><strong>类似的，我们也可以通过浏览器的F12进入开发者模式并使用鼠标点击来获取CSS样式名，并在此文件中设置对应的样式属性来实现各种自定义修改的CSS样式</strong></p><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hexo版本&lt;/strong&gt;：4.2.0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NexT版本&lt;/strong&gt;：7.7.1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub&lt;/strong&gt;：&lt;a href=&quot;https://github.com/theme-next/theme-next-pace&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;theme-next-pace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="个人博客搭建" scheme="https://tomandersen-cc.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Blog" scheme="https://tomandersen-cc.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="https://tomandersen-cc.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://tomandersen-cc.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo之NexT主题中设置加载进度条</title>
    <link href="https://tomandersen-cc.github.io/2020/03/06/Hexo%E4%B9%8BNexT%E4%B8%BB%E9%A2%98%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%8A%A0%E8%BD%BD%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <id>https://tomandersen-cc.github.io/2020/03/06/Hexo%E4%B9%8BNexT%E4%B8%BB%E9%A2%98%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%8A%A0%E8%BD%BD%E8%BF%9B%E5%BA%A6%E6%9D%A1/</id>
    <published>2020-03-06T04:14:35.000Z</published>
    <updated>2020-03-12T04:19:16.746Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><strong>Hexo版本</strong>：4.2.0</li><li><strong>NexT版本</strong>：7.7.1</li><li><strong>GitHub</strong>：<a href="https://github.com/theme-next/theme-next-pace" target="_blank" rel="noopener">theme-next-pace</a></li><li><strong>各种进度条样式参考</strong>：<a href="https://blog.pangao.vip/Hexo博客NexT主题美化之顶部加载进度条/" target="_blank" rel="noopener">Hexo博客NexT主题美化之顶部加载进度条</a></li></ul><hr><a id="more"></a><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><h3 id="1）进入NexT主题文件夹"><a href="#1）进入NexT主题文件夹" class="headerlink" title="1）进入NexT主题文件夹"></a>1）进入NexT主题文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next/</span><br><span class="line">$ ls</span><br><span class="line">_config.yml  docs/        languages/  LICENSE.md    README.md  <span class="built_in">source</span>/</span><br><span class="line">crowdin.yml  gulpfile.js  layout/     package.json  scripts/</span><br></pre></td></tr></table></figure><h3 id="2）克隆Github仓库（如果使用CDN可跳过此步骤）"><a href="#2）克隆Github仓库（如果使用CDN可跳过此步骤）" class="headerlink" title="2）克隆Github仓库（如果使用CDN可跳过此步骤）"></a>2）克隆Github仓库（如果使用CDN可跳过此步骤）</h3><p><strong>将仓库克隆至<code>themes/next/source/lib</code>路径下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace <span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure><h3 id="3）配置NexT中的-config-xml"><a href="#3）配置NexT中的-config-xml" class="headerlink" title="3）配置NexT中的_config.xml"></a>3）配置NexT中的<code>_config.xml</code></h3><p><strong>开启pace选项</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="comment"># 设置页面加载时顶部进度条</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-pace</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/HubSpot/pace</span></span><br><span class="line">pace:</span><br><span class="line">  <span class="comment"># enable: false</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Themes list:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  theme: minimal</span><br></pre></td></tr></table></figure><h3 id="4）配置进度条CDN地址"><a href="#4）配置进度条CDN地址" class="headerlink" title="4）配置进度条CDN地址"></a>4）配置进度条CDN地址</h3><p><strong>在NexT主题的<code>_config.xml</code>文件中找到<code>vendors</code>选项，设置pace的cdn地址（本人设置的进度条为黑色主题，可以在<a href="https://www.jsdelivr.com/package/npm/pace-js?path=themes" target="_blank" rel="noopener">jsdelivr</a>中找到对应的样式最新版cdn地址）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vendors:</span><br><span class="line">  ...</span><br><span class="line">  pace: https://cdn.jsdelivr.net/npm/pace-js@1.0.2/pace.min.js</span><br><span class="line">  pace_css: https://cdn.jsdelivr.net/npm/pace-js@1.0.2/themes/black/pace-theme-loading-bar.css</span><br></pre></td></tr></table></figure><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hexo版本&lt;/strong&gt;：4.2.0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NexT版本&lt;/strong&gt;：7.7.1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub&lt;/strong&gt;：&lt;a href=&quot;https://github.com/theme-next/theme-next-pace&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;theme-next-pace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;各种进度条样式参考&lt;/strong&gt;：&lt;a href=&quot;https://blog.pangao.vip/Hexo博客NexT主题美化之顶部加载进度条/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo博客NexT主题美化之顶部加载进度条&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="个人博客搭建" scheme="https://tomandersen-cc.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Blog" scheme="https://tomandersen-cc.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="https://tomandersen-cc.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://tomandersen-cc.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo之NexT主题中设置canvas-nest特效</title>
    <link href="https://tomandersen-cc.github.io/2020/03/06/Hexo%E4%B9%8BNexT%E4%B8%BB%E9%A2%98%E4%B8%AD%E8%AE%BE%E7%BD%AEcanvas-nest%E7%89%B9%E6%95%88/"/>
    <id>https://tomandersen-cc.github.io/2020/03/06/Hexo%E4%B9%8BNexT%E4%B8%BB%E9%A2%98%E4%B8%AD%E8%AE%BE%E7%BD%AEcanvas-nest%E7%89%B9%E6%95%88/</id>
    <published>2020-03-06T03:06:19.000Z</published>
    <updated>2020-03-12T04:19:53.530Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><strong>Hexo版本</strong>：4.2.0</li><li><strong>NexT版本</strong>：7.7.1</li><li><strong>NexT中集成有canvas_nest插件</strong></li><li><strong>GitHub</strong>：<a href="https://github.com/theme-next/theme-next-canvas-nest" target="_blank" rel="noopener">theme-next-canvas-nest</a></li><li><a href="https://git.hust.cc/canvas-nest.js" target="_blank" rel="noopener">canvas-nest特效展示</a></li></ul><a id="more"></a><hr><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><h3 id="1）配置NexT主题配置文件themes-next-config-yml"><a href="#1）配置NexT主题配置文件themes-next-config-yml" class="headerlink" title="1）配置NexT主题配置文件themes/next/_config.yml"></a>1）配置NexT主题配置文件<code>themes/next/_config.yml</code></h3><p><strong>a）开启canvas_nest</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="comment"># 若要开启canvas_nest,除了此处设置成true,还需要设置canvas_nest的vendors提供商</span></span><br><span class="line">canvas_nest:</span><br><span class="line">  <span class="comment">#enable: false</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  onmobile: <span class="literal">true</span> <span class="comment"># Display on mobile or not</span></span><br><span class="line">  color: <span class="string">"0,0,255"</span> <span class="comment"># RGB values, use `,` to separate</span></span><br><span class="line">  opacity: 0.5 <span class="comment"># The opacity of line: 0~1</span></span><br><span class="line">  zIndex: -1 <span class="comment"># z-index property of the background</span></span><br><span class="line">  count: 99 <span class="comment"># The number of lines</span></span><br></pre></td></tr></table></figure><p><strong>b）设置canvas_nest脚本来源：在配置文件vendors选项下取消canvas_nest cdn注释</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Internal version: 1.0.0</span></span><br><span class="line"><span class="comment"># 设置canvas_nest的来源</span></span><br><span class="line">canvas_nest: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1/canvas-nest.min.js</span><br><span class="line">canvas_nest_nomobile: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1/canvas-nest-nomobile.min.js</span><br><span class="line"><span class="comment"># canvas_nest:</span></span><br><span class="line"><span class="comment"># canvas_nest_nomobile:</span></span><br></pre></td></tr></table></figure><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hexo版本&lt;/strong&gt;：4.2.0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NexT版本&lt;/strong&gt;：7.7.1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NexT中集成有canvas_nest插件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub&lt;/strong&gt;：&lt;a href=&quot;https://github.com/theme-next/theme-next-canvas-nest&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;theme-next-canvas-nest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git.hust.cc/canvas-nest.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;canvas-nest特效展示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="个人博客搭建" scheme="https://tomandersen-cc.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Blog" scheme="https://tomandersen-cc.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="https://tomandersen-cc.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://tomandersen-cc.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo之NexT主题中设置symbols_count_time统计单词</title>
    <link href="https://tomandersen-cc.github.io/2020/03/06/Hexo%E4%B9%8BNexT%E4%B8%BB%E9%A2%98%E4%B8%AD%E8%AE%BE%E7%BD%AEsymbols-count-time%E7%BB%9F%E8%AE%A1%E5%8D%95%E8%AF%8D/"/>
    <id>https://tomandersen-cc.github.io/2020/03/06/Hexo%E4%B9%8BNexT%E4%B8%BB%E9%A2%98%E4%B8%AD%E8%AE%BE%E7%BD%AEsymbols-count-time%E7%BB%9F%E8%AE%A1%E5%8D%95%E8%AF%8D/</id>
    <published>2020-03-06T02:47:55.000Z</published>
    <updated>2020-03-12T04:19:58.303Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><strong>Hexo版本</strong>：4.2.0</li><li><strong>NexT版本</strong>：7.7.1</li><li><strong>symbols_count_time</strong>能够统计页面或者站点的单词以及阅读所需时间</li><li>自NexT 6.0发行版之后第三方插件<strong>hexo-wordcount</strong>就被<strong>symbols_count_time</strong>取缔了，相比之下<strong>symbols_count_time</strong>没有额外的依赖，性能更加强大</li><li><strong>GitHub</strong>：<a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">symbols_count_time</a></li></ul><a id="more"></a><hr><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><h3 id="1）安装symbols-count-time插件"><a href="#1）安装symbols-count-time插件" class="headerlink" title="1）安装symbols_count_time插件"></a>1）安装symbols_count_time插件</h3><p><strong>在Hexo的根目录下安装symbols_count_time</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure><p><strong>若npm下载速度太慢可以使用淘宝npm镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure><h3 id="2）配置Hexo站点配置文件-config-yml"><a href="#2）配置Hexo站点配置文件-config-yml" class="headerlink" title="2）配置Hexo站点配置文件_config.yml"></a>2）配置Hexo站点配置文件<code>_config.yml</code></h3><p><strong>在合适位置添加以下配置信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置博客单词统计</span></span><br><span class="line">symbols_count_time:</span><br><span class="line">  <span class="comment"># 文章字数统计</span></span><br><span class="line">  symbols: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 文章阅读时间统计</span></span><br><span class="line">  time: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 站点总字数统计</span></span><br><span class="line">  total_symbols: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 站点总阅读时间统计</span></span><br><span class="line">  total_time: <span class="literal">false</span></span><br><span class="line">  exclude_codeblock: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="3）配置NexT主题配置文件themes-next-config-yml"><a href="#3）配置NexT主题配置文件themes-next-config-yml" class="headerlink" title="3）配置NexT主题配置文件themes/next/_config.yml"></a>3）配置NexT主题配置文件<code>themes/next/_config.yml</code></h3><p><strong>在symbols_count_time选下开启单词统计</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="comment"># 设置博客单词统计</span></span><br><span class="line">symbols_count_time:</span><br><span class="line">  <span class="comment"># 是否另起一行（true的话不和发表时间等同一行）</span></span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）</span></span><br><span class="line">  item_text_post: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）</span></span><br><span class="line">  item_text_total: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 平均字长</span></span><br><span class="line">  awl: 4</span><br><span class="line">  <span class="comment"># 每分钟阅读字数</span></span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure><h3 id="4）重新生成Hexo即可"><a href="#4）重新生成Hexo即可" class="headerlink" title="4）重新生成Hexo即可"></a>4）重新生成Hexo即可</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hexo版本&lt;/strong&gt;：4.2.0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NexT版本&lt;/strong&gt;：7.7.1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;symbols_count_time&lt;/strong&gt;能够统计页面或者站点的单词以及阅读所需时间&lt;/li&gt;
&lt;li&gt;自NexT 6.0发行版之后第三方插件&lt;strong&gt;hexo-wordcount&lt;/strong&gt;就被&lt;strong&gt;symbols_count_time&lt;/strong&gt;取缔了，相比之下&lt;strong&gt;symbols_count_time&lt;/strong&gt;没有额外的依赖，性能更加强大&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub&lt;/strong&gt;：&lt;a href=&quot;https://github.com/theme-next/hexo-symbols-count-time&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;symbols_count_time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="个人博客搭建" scheme="https://tomandersen-cc.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Blog" scheme="https://tomandersen-cc.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="https://tomandersen-cc.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://tomandersen-cc.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Flume之使用Loadbalancing Sink Processor实现sink负载均衡</title>
    <link href="https://tomandersen-cc.github.io/2020/03/05/Flume%E4%B9%8B%E4%BD%BF%E7%94%A8Loadbalancing-Sink-Processor%E5%AE%9E%E7%8E%B0sink%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>https://tomandersen-cc.github.io/2020/03/05/Flume%E4%B9%8B%E4%BD%BF%E7%94%A8Loadbalancing-Sink-Processor%E5%AE%9E%E7%8E%B0sink%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</id>
    <published>2020-03-05T13:47:53.000Z</published>
    <updated>2020-03-08T13:45:30.748Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><strong>Load balancing Sink Processor</strong>，顾名思义，即能够对Sink组中的每个Sink实现负载均衡，默认采用的是轮询<strong>round_robin</strong>的方式，还可以使用随机方式<strong>random</strong>，或者用户自己实现AbstractSinkSelector抽象类定义自己的Sink Selector类，并提供FQCN（Full Qualified Class Name）全类名来进行配置，并且Load balancing Sink Processor还提供了指数退避backoff，即当某个Sink挂掉时，将会将其加入到黑名单，一定时间内不再访问此Sink，退避时间呈指数增长并默认最大值为30000ms，可以手动设置</li></ul><hr><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="1）flume1-properties"><a href="#1）flume1-properties" class="headerlink" title="1）flume1.properties"></a>1）flume1.properties</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flume1:此配置用于监控某个端口将其追加内容输出到flume2和flume3中</span></span><br><span class="line"><span class="comment"># 并将两个Sink组成一个sink group,并将Sink Processor设置成load_balance类型</span></span><br><span class="line"><span class="comment"># a1:Netcat Source-&gt; Memory Channel-&gt; Load balancing Sink Processor-&gt; Avro Sink</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sink groups</span></span><br><span class="line">a1.sinkgroups = g1</span><br><span class="line"><span class="comment"># 设置sink group中的sinks</span></span><br><span class="line">a1.sinkgroups.g1.sinks = k1 k2</span><br><span class="line"><span class="comment"># 配置Load balancing Sink Processor(只有sink group才可以使用sink processor)</span></span><br><span class="line">a1.sinkgroups.g1.processor.type = load_balance</span><br><span class="line"><span class="comment"># 设置开启指数避让</span></span><br><span class="line">a1.sinkgroups.g1.processor.backoff = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 设置Processor的selector为轮询round_robin</span></span><br><span class="line">a1.sinkgroups.g1.processor.selector = round_robin</span><br><span class="line"><span class="comment"># 设置最大避让时间(ms)</span></span><br><span class="line">a1.sinkgroups.g1.processor.maxTimeOut = 10000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sources</span></span><br><span class="line"><span class="comment"># 配置a1.sources.r1的各项属性参数,类型/绑定主机ip/端口号</span></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = hadoop101</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line"><span class="comment"># 配置a1.channerls.c1的各项属性参数,缓存方式/最多缓存的Event个数/单次传输的Event个数</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sinks</span></span><br><span class="line"><span class="comment"># sinks.k1</span></span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = hadoop102</span><br><span class="line">a1.sinks.k1.port = 4141</span><br><span class="line"><span class="comment"># sinks.k2</span></span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.hostname = hadoop103</span><br><span class="line">a1.sinks.k2.port = 4141</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind</span></span><br><span class="line"><span class="comment"># 注意:source可以绑定多个channel,但是sink/sink group只能绑定单个channel</span></span><br><span class="line"><span class="comment"># r1-&gt;c1-&gt;g1</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k2.channel = c1</span><br></pre></td></tr></table></figure><h3 id="2）flume2-properties"><a href="#2）flume2-properties" class="headerlink" title="2）flume2.properties"></a>2）flume2.properties</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flume2:此配置用于将来自指定Avro端口的数据输出到控制台</span></span><br><span class="line"><span class="comment"># a2:Avro Source-&gt;Memory Channel-&gt;Logger Sink</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Agent</span></span><br><span class="line">a2.sources = r1</span><br><span class="line">a2.channels = c1</span><br><span class="line">a2.sinks = k1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sources</span></span><br><span class="line"><span class="comment"># a2.sources.r1</span></span><br><span class="line">a2.sources.r1.type = avro</span><br><span class="line"><span class="comment"># 设置监听本地IP</span></span><br><span class="line">a2.sources.r1.bind = 0.0.0.0</span><br><span class="line"><span class="comment"># 设置监听端口号</span></span><br><span class="line">a2.sources.r1.port = 4141</span><br><span class="line"></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line"><span class="comment"># a2.channels.c1</span></span><br><span class="line"><span class="comment"># 使用内存作为缓存/最多缓存的Event个数/单次传输的Event个数</span></span><br><span class="line">a2.channels.c1.type = memory</span><br><span class="line">a2.channels.c1.capacity = 1000</span><br><span class="line">a2.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sinks</span></span><br><span class="line"><span class="comment"># 运行时设置参数 -Dflume.root.logger=INFO,console 即输出到控制台实时显示</span></span><br><span class="line">a2.sinks.k1.type = logger</span><br><span class="line"><span class="comment"># 设置Event的Body中写入log的最大字节数(默认值为16)</span></span><br><span class="line">a2.sinks.k1.maxBytesToLog = 256</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind</span></span><br><span class="line">a2.sources.r1.channels = c1</span><br><span class="line">a2.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><h3 id="3）flume3-properties"><a href="#3）flume3-properties" class="headerlink" title="3）flume3.properties"></a>3）flume3.properties</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flume3:此配置用于将来自指定Avro端口的数据输出到控制台</span></span><br><span class="line"><span class="comment"># a3:Avro Source-&gt;Memory Channel-&gt;Logger Sink</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Agent</span></span><br><span class="line">a3.sources = r1</span><br><span class="line">a3.channels = c1</span><br><span class="line">a3.sinks = k1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sources</span></span><br><span class="line"><span class="comment"># a3.sources.r1</span></span><br><span class="line">a3.sources.r1.type = avro</span><br><span class="line"><span class="comment"># 设置监听本地IP</span></span><br><span class="line">a3.sources.r1.bind = 0.0.0.0</span><br><span class="line"><span class="comment"># 设置监听端口号</span></span><br><span class="line">a3.sources.r1.port = 4141</span><br><span class="line"></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line"><span class="comment"># a3.channels.c1</span></span><br><span class="line"><span class="comment"># 使用内存作为缓存/最多缓存的Event个数/单次传输的Event个数</span></span><br><span class="line">a3.channels.c1.type = memory</span><br><span class="line">a3.channels.c1.capacity = 1000</span><br><span class="line">a3.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sinks</span></span><br><span class="line"><span class="comment"># 运行时设置参数 -Dflume.root.logger=INFO,console 即输出到控制台实时显示</span></span><br><span class="line">a3.sinks.k1.type = logger</span><br><span class="line"><span class="comment"># 设置Event的Body中写入log的最大字节数(默认值为16)</span></span><br><span class="line">a3.sinks.k1.maxBytesToLog = 256</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind</span></span><br><span class="line">a3.sources.r1.channels = c1</span><br><span class="line">a3.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><h3 id="4）对应功能"><a href="#4）对应功能" class="headerlink" title="4）对应功能"></a>4）对应功能</h3><p><strong>agent a1将指定端口的监听数据采用轮询的方式传输给a2和a3，并分别输出到各自的控制台</strong></p><h3 id="5）启动命令"><a href="#5）启动命令" class="headerlink" title="5）启动命令"></a>5）启动命令</h3><p><strong>Flume Agent a1至a3分别运行在主机hadoop101、hadoop102、hadoop103上</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/flume-ng agent -n a1 -c conf -f flume1.properties</span><br><span class="line">./bin/flume-ng agent -n a2 -c conf -f flume2.properties -Dflume.root.logger=INFO,console</span><br><span class="line">./bin/flume-ng agent -n a3 -c conf -f flume3.properties -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="Flume" scheme="https://tomandersen-cc.github.io/categories/Flume/"/>
    
    
      <category term="Linux" scheme="https://tomandersen-cc.github.io/tags/Linux/"/>
    
      <category term="Flume" scheme="https://tomandersen-cc.github.io/tags/Flume/"/>
    
      <category term="大数据" scheme="https://tomandersen-cc.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Flume之使用Failover Sink Processor实现sink故障转移</title>
    <link href="https://tomandersen-cc.github.io/2020/03/05/Flume%E4%B9%8B%E4%BD%BF%E7%94%A8Failover-Sink-Processor%E5%AE%9E%E7%8E%B0sink%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB/"/>
    <id>https://tomandersen-cc.github.io/2020/03/05/Flume%E4%B9%8B%E4%BD%BF%E7%94%A8Failover-Sink-Processor%E5%AE%9E%E7%8E%B0sink%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB/</id>
    <published>2020-03-05T13:29:34.000Z</published>
    <updated>2020-03-08T13:45:11.295Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><strong>Failover Sink Processor</strong> 维护着Sink组中Sinks的优先级表，根据优先级尝试将Event传输给不同的Sink直到Event成功发送。当优先级高的Sink不可用时，会将Event传输给下一优先级Sink，以此来确保每个Event都能被投递。当Sink不可用时，Failover Sink Processor和<strong>Load balancing Sink Processor</strong>一样，也会进行指数回退backoff，并可以设置最大回退时间（即在黑名单中的保存时间），在倒计时结束后会再次尝试访问之前挂掉的Sink</li></ul><hr><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="1）flume1-properties"><a href="#1）flume1-properties" class="headerlink" title="1）flume1.properties"></a>1）flume1.properties</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flume1:此配置用于监控某个窗口将其追加内容输出到flume2和flume3中</span></span><br><span class="line"><span class="comment"># 并将两个Sink组成一个sink group,并将Sink Processor设置成Failover类型</span></span><br><span class="line"><span class="comment"># a1:Netcat Source-&gt;Memory Channel-&gt;Avro Sink</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sink groups</span></span><br><span class="line">a1.sinkgroups = g1</span><br><span class="line"><span class="comment"># 设置sink group中的sinks</span></span><br><span class="line">a1.sinkgroups.g1.sinks = k1 k2</span><br><span class="line"><span class="comment"># 设置Failover sink processor(只有sink group才可以使用sink processor)</span></span><br><span class="line">a1.sinkgroups.g1.processor.type = failover</span><br><span class="line"><span class="comment"># 设置Failover sink processor优先级表</span></span><br><span class="line">a1.sinkgroups.g1.processor.priority.k1 = 5</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k2 = 10</span><br><span class="line"><span class="comment"># 设置最大避让时间(ms)</span></span><br><span class="line">a1.sinkgroups.g1.processor.maxpenalty = 10000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sources</span></span><br><span class="line"><span class="comment"># 配置a1.sources.r1的各项属性参数,类型/绑定主机ip/端口号</span></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = hadoop101</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line"><span class="comment"># 配置a1.channerls.c1的各项属性参数,缓存方式/最多缓存的Event个数/单次传输的Event个数</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sinks</span></span><br><span class="line"><span class="comment"># sinks.k1</span></span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = hadoop102</span><br><span class="line">a1.sinks.k1.port = 4141</span><br><span class="line"><span class="comment"># sinks.k2</span></span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.hostname = hadoop103</span><br><span class="line">a1.sinks.k2.port = 4141</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind</span></span><br><span class="line"><span class="comment"># 注意:source可以绑定多个channel,但是sink/sink group只能绑定单个channel</span></span><br><span class="line"><span class="comment"># r1-&gt;c1-&gt;g1</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k2.channel = c1</span><br></pre></td></tr></table></figure><h3 id="2）flume2-properties"><a href="#2）flume2-properties" class="headerlink" title="2）flume2.properties"></a>2）flume2.properties</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flume2:此配置用于将来自指定Avro端口的数据输出到控制台</span></span><br><span class="line"><span class="comment"># a2:Avro Source-&gt;Memory Channel-&gt;Logger Sink</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Agent</span></span><br><span class="line">a2.sources = r1</span><br><span class="line">a2.channels = c1</span><br><span class="line">a2.sinks = k1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sources</span></span><br><span class="line"><span class="comment"># a2.sources.r1</span></span><br><span class="line">a2.sources.r1.type = avro</span><br><span class="line"><span class="comment"># 设置监听本地IP</span></span><br><span class="line">a2.sources.r1.bind = 0.0.0.0</span><br><span class="line"><span class="comment"># 设置监听端口号</span></span><br><span class="line">a2.sources.r1.port = 4141</span><br><span class="line"></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line"><span class="comment"># a2.channels.c1</span></span><br><span class="line"><span class="comment"># 使用内存作为缓存/最多缓存的Event个数/单次传输的Event个数</span></span><br><span class="line">a2.channels.c1.type = memory</span><br><span class="line">a2.channels.c1.capacity = 1000</span><br><span class="line">a2.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sinks</span></span><br><span class="line"><span class="comment"># 运行时设置参数 -Dflume.root.logger=INFO,console 即输出到控制台实时显示</span></span><br><span class="line">a2.sinks.k1.type = logger</span><br><span class="line"><span class="comment"># 设置Event的Body中写入log的最大字节数(默认值为16)</span></span><br><span class="line">a2.sinks.k1.maxBytesToLog = 256</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind</span></span><br><span class="line">a2.sources.r1.channels = c1</span><br><span class="line">a2.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><h3 id="3）flume3-properties"><a href="#3）flume3-properties" class="headerlink" title="3）flume3.properties"></a>3）flume3.properties</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flume3:此配置用于将来自指定Avro端口的数据输出到控制台</span></span><br><span class="line"><span class="comment"># a3:Avro Source-&gt;Memory Channel-&gt;Logger Sink</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Agent</span></span><br><span class="line">a3.sources = r1</span><br><span class="line">a3.channels = c1</span><br><span class="line">a3.sinks = k1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sources</span></span><br><span class="line"><span class="comment"># a3.sources.r1</span></span><br><span class="line">a3.sources.r1.type = avro</span><br><span class="line"><span class="comment"># 设置监听本地IP</span></span><br><span class="line">a3.sources.r1.bind = 0.0.0.0</span><br><span class="line"><span class="comment"># 设置监听端口号</span></span><br><span class="line">a3.sources.r1.port = 4141</span><br><span class="line"></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line"><span class="comment"># a3.channels.c1</span></span><br><span class="line"><span class="comment"># 使用内存作为缓存/最多缓存的Event个数/单次传输的Event个数</span></span><br><span class="line">a3.channels.c1.type = memory</span><br><span class="line">a3.channels.c1.capacity = 1000</span><br><span class="line">a3.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sinks</span></span><br><span class="line"><span class="comment"># 运行时设置参数 -Dflume.root.logger=INFO,console 即输出到控制台实时显示</span></span><br><span class="line">a3.sinks.k1.type = logger</span><br><span class="line"><span class="comment"># 设置Event的Body中写入log的最大字节数(默认值为16)</span></span><br><span class="line">a3.sinks.k1.maxBytesToLog = 256</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind</span></span><br><span class="line">a3.sources.r1.channels = c1</span><br><span class="line">a3.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><h3 id="4）对应功能"><a href="#4）对应功能" class="headerlink" title="4）对应功能"></a>4）对应功能</h3><ul><li><strong>Aent a1将指定端口的监听数据输出到a2或者a3的控制台</strong></li><li><strong>当Event从Channel中传输给Sink Group之前，首先会根据配置Failover sink processor优先级表尝试将此Event发送给优先级最高的可用Sink，如果成功则继续处理下一个Event。如果在发送过程中，当前Sink宕机，则将其加入黑名单，一定时间内不再尝试将Event发往此Sink，并且退避时间呈指数增长，直到最大退避时间maxpenalty，以此来实现Sink的故障转移</strong></li></ul><h3 id="5）启动命令"><a href="#5）启动命令" class="headerlink" title="5）启动命令"></a>5）启动命令</h3><p><strong>Flume Agent a1至a3分别运行在主机hadoop101、hadoop102、hadoop103上</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/flume-ng agent -n a1 -c conf -f flume1.properties</span><br><span class="line">./bin/flume-ng agent -n a2 -c conf -f flume2.properties -Dflume.root.logger=INFO,console</span><br><span class="line">./bin/flume-ng agent -n a3 -c conf -f flume3.properties -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="Flume" scheme="https://tomandersen-cc.github.io/categories/Flume/"/>
    
    
      <category term="Linux" scheme="https://tomandersen-cc.github.io/tags/Linux/"/>
    
      <category term="Flume" scheme="https://tomandersen-cc.github.io/tags/Flume/"/>
    
      <category term="大数据" scheme="https://tomandersen-cc.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Flume之Multiplexing Channel Selector使用示例</title>
    <link href="https://tomandersen-cc.github.io/2020/03/05/Flume%E4%B9%8BMultiplexing-Channel-Selector%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
    <id>https://tomandersen-cc.github.io/2020/03/05/Flume%E4%B9%8BMultiplexing-Channel-Selector%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</id>
    <published>2020-03-05T12:58:33.000Z</published>
    <updated>2020-03-08T13:46:57.911Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><strong>Multiplexing Channe Selector</strong> 的作用就是根据 <strong>Event</strong> 的 <strong>Header</strong> 中的某个或几个字段的值将其映射到指定的 <strong>Channel</strong> ，便于之后 <strong>Channel Processor</strong> 将Event发送至对应的Channel中去。在Flume中，Multiplexing Channel Selector一般都与 <strong>Interceptor</strong> 拦截器搭配使用，因为新鲜的Event数据中Header为空，需要Interceptor去填充所需字段</li></ul><hr><h2 id="具体配置"><a href="#具体配置" class="headerlink" title="具体配置"></a>具体配置</h2><h3 id="1）flume1-properties"><a href="#1）flume1-properties" class="headerlink" title="1）flume1.properties"></a>1）flume1.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flume1:此配置用于监控单个或多个指定文件将其追加内容生成的Event先通过自定义的TypeInterceptor</span></span><br><span class="line"><span class="comment"># 根据Body中的内容向其Header中添加type字段,然后使用Multiplexing Channel Selector将不同</span></span><br><span class="line"><span class="comment"># type的Event传输到不同的Channel中,最后分别输出到flume2和flume3的控制台</span></span><br><span class="line"><span class="comment"># a1:TailDir Source-&gt; TypeInterceptor -&gt; Multiplexing Channel Selector -&gt;</span></span><br><span class="line"><span class="comment">#   Memory Channel -&gt; Avro Sink</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Agent</span></span><br><span class="line"><span class="meta">a1.sources</span> = <span class="string">r1</span></span><br><span class="line"><span class="meta">a1.channels</span> = <span class="string">c1 c2</span></span><br><span class="line"><span class="meta">a1.sinks</span> = <span class="string">k1 k2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sources</span></span><br><span class="line"><span class="comment"># a1.sources.r1</span></span><br><span class="line"><span class="meta">a1.sources.r1.type</span> = <span class="string">TAILDIR</span></span><br><span class="line"><span class="comment"># 设置Json文件存储路径(最好使用绝对路径)</span></span><br><span class="line"><span class="comment"># 用于记录文件inode/文件的绝对路径/每个文件的最后读取位置等信息</span></span><br><span class="line"><span class="meta">a1.sources.r1.positionFile</span> = <span class="string">/opt/module/flume-1.8.0/.position/taildir_position.json</span></span><br><span class="line"><span class="comment"># 指定监控的文件组</span></span><br><span class="line"><span class="meta">a1.sources.r1.filegroups</span> = <span class="string">f1</span></span><br><span class="line"><span class="comment"># 配置文件组中的被监控文件</span></span><br><span class="line"><span class="comment"># 设置f2组的监控文件,注意:使用的是正则表达式,而不是Linux通配符</span></span><br><span class="line"><span class="meta">a1.sources.r1.filegroups.f1</span> = <span class="string">/tmp/logs/^.*log$</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Interceptor</span></span><br><span class="line"><span class="comment"># a1.sources.r1.interceptors</span></span><br><span class="line"><span class="comment"># 配置Interceptor链,Interceptor调用顺序与配置循序相同</span></span><br><span class="line"><span class="meta">a1.sources.r1.interceptors</span> = <span class="string">typeInterceptor</span></span><br><span class="line"><span class="comment"># 指定使用的自定义Interceptor全类名,并使用其中的静态内部类Builder</span></span><br><span class="line"><span class="comment"># 要想使用自定义Interceptor,必须将实现的类打包成jar包放入$FLUME_HOME/lib文件夹中</span></span><br><span class="line"><span class="comment"># flume运行Java程序时会将此路径加入到ClassPath中</span></span><br><span class="line"><span class="meta">a1.sources.r1.interceptors.typeInterceptor.type</span> = <span class="string">com.tomandersen.interceptors.TypeInterceptor$Builder</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line"><span class="comment"># a1.channels.c1</span></span><br><span class="line"><span class="comment"># 使用内存作为缓存/最多缓存的Event个数/单次传输的Event个数</span></span><br><span class="line"><span class="meta">a1.channels.c1.type</span> = <span class="string">memory</span></span><br><span class="line"><span class="meta">a1.channels.c1.capacity</span> = <span class="string">1000</span></span><br><span class="line"><span class="meta">a1.channels.c1.transactionCapacity</span> = <span class="string">100</span></span><br><span class="line"><span class="comment"># a1.channels.c2</span></span><br><span class="line"><span class="meta">a1.channels.c2.type</span> = <span class="string">memory</span></span><br><span class="line"><span class="meta">a1.channels.c2.capacity</span> = <span class="string">1000</span></span><br><span class="line"><span class="meta">a1.channels.c2.transactionCapacity</span> = <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Channel Selector</span></span><br><span class="line"><span class="comment"># a1.sources.r1.selector</span></span><br><span class="line"><span class="comment"># 使用Multiple Channel Selector</span></span><br><span class="line"><span class="meta">a1.sources.r1.selector.type</span> = <span class="string">multiplexing</span></span><br><span class="line"><span class="comment"># 设置匹配Header的字段</span></span><br><span class="line"><span class="meta">a1.sources.r1.selector.header</span> = <span class="string">type</span></span><br><span class="line"><span class="comment"># 设置不同字段的值映射至各个Channel,其余的Event默认丢弃</span></span><br><span class="line"><span class="meta">a1.sources.r1.selector.mapping.Startup</span> = <span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sources.r1.selector.mapping.Event</span> = <span class="string">c2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sinks</span></span><br><span class="line"><span class="comment"># a1.sinks.k1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.type</span> = <span class="string">avro</span></span><br><span class="line"><span class="meta">a1.sinks.k1.hostname</span> = <span class="string">hadoop102</span></span><br><span class="line"><span class="meta">a1.sinks.k1.port</span> = <span class="string">4141</span></span><br><span class="line"><span class="comment"># a1.sinks.k2</span></span><br><span class="line"><span class="meta">a1.sinks.k2.type</span> = <span class="string">avro</span></span><br><span class="line"><span class="meta">a1.sinks.k2.hostname</span> = <span class="string">hadoop103</span></span><br><span class="line"><span class="meta">a1.sinks.k2.port</span> = <span class="string">4141</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind</span></span><br><span class="line"><span class="comment"># r1-&gt;TypeInterceptor-&gt;Multiplexing Channel Selector-&gt;c1-&gt;k1</span></span><br><span class="line"><span class="comment"># r1-&gt;TypeInterceptor-&gt;Multiplexing Channel Selector-&gt;c2-&gt;k2</span></span><br><span class="line"><span class="meta">a1.sources.r1.channels</span> = <span class="string">c1 c2</span></span><br><span class="line"><span class="meta">a1.sinks.k1.channel</span> = <span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks.k2.channel</span> = <span class="string">c2</span></span><br></pre></td></tr></table></figure><h3 id="2）flume2-properties"><a href="#2）flume2-properties" class="headerlink" title="2）flume2.properties"></a>2）flume2.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flume2:此配置用于将来自指定Avro端口的数据输出到控制台中</span></span><br><span class="line"><span class="comment"># a2:Avro Source-&gt;Memory Channel-&gt;Logger Sink</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Agent</span></span><br><span class="line"><span class="meta">a2.sources</span> = <span class="string">r1</span></span><br><span class="line"><span class="meta">a2.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="meta">a2.sinks</span> = <span class="string">k1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sources</span></span><br><span class="line"><span class="meta">a2.sources.r1.type</span> = <span class="string">avro</span></span><br><span class="line"><span class="meta">a2.sources.r1.bind</span> = <span class="string">0.0.0.0</span></span><br><span class="line"><span class="meta">a2.sources.r1.port</span> = <span class="string">4141</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line"><span class="meta">a2.channels.c1.type</span> = <span class="string">memory</span></span><br><span class="line"><span class="meta">a2.channels.c1.capacity</span> = <span class="string">1000</span></span><br><span class="line"><span class="meta">a2.channels.c1.transactionCapacity</span> = <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sinks</span></span><br><span class="line"><span class="comment"># 运行时设置参数 -Dflume.root.logger=INFO,console 即输出到控制台实时显示</span></span><br><span class="line"><span class="meta">a2.sinks.k1.type</span> = <span class="string">logger</span></span><br><span class="line"><span class="comment"># 设置Event的Body中写入log的最大字节数(默认值为16)</span></span><br><span class="line"><span class="meta">a2.sinks.k1.maxBytesToLog</span> = <span class="string">256</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind</span></span><br><span class="line"><span class="attr">r1-&gt;c1-&gt;k1</span></span><br><span class="line"><span class="meta">a2.sources.r1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="meta">a2.sinks.k1.channel</span> = <span class="string">c1</span></span><br></pre></td></tr></table></figure><h3 id="3）flume3-properties"><a href="#3）flume3-properties" class="headerlink" title="3）flume3.properties"></a>3）flume3.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flume3:此配置用于将来自指定Avro端口的数据输出到控制台中</span></span><br><span class="line"><span class="comment"># a3:Avro Source-&gt;Memory Channel-&gt;Logger Sink</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Agent</span></span><br><span class="line"><span class="meta">a3.sources</span> = <span class="string">r1</span></span><br><span class="line"><span class="meta">a3.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="meta">a3.sinks</span> = <span class="string">k1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sources</span></span><br><span class="line"><span class="meta">a3.sources.r1.type</span> = <span class="string">avro</span></span><br><span class="line"><span class="meta">a3.sources.r1.bind</span> = <span class="string">0.0.0.0</span></span><br><span class="line"><span class="meta">a3.sources.r1.port</span> = <span class="string">4141</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line"><span class="meta">a3.channels.c1.type</span> = <span class="string">memory</span></span><br><span class="line"><span class="meta">a3.channels.c1.capacity</span> = <span class="string">1000</span></span><br><span class="line"><span class="meta">a3.channels.c1.transactionCapacity</span> = <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sinks</span></span><br><span class="line"><span class="comment"># 运行时设置参数 -Dflume.root.logger=INFO,console 即输出到控制台实时显示</span></span><br><span class="line"><span class="meta">a3.sinks.k1.type</span> = <span class="string">logger</span></span><br><span class="line"><span class="comment"># 设置Event的Body中写入log的最大字节数(默认值为16)</span></span><br><span class="line"><span class="meta">a3.sinks.k1.maxBytesToLog</span> = <span class="string">256</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind</span></span><br><span class="line"><span class="attr">r1-&gt;c1-&gt;k1</span></span><br><span class="line"><span class="meta">a3.sources.r1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="meta">a3.sinks.k1.channel</span> = <span class="string">c1</span></span><br></pre></td></tr></table></figure><h3 id="4）对应功能"><a href="#4）对应功能" class="headerlink" title="4）对应功能"></a>4）对应功能</h3><p><strong>Agent a1监听本地指定文件,将监听到的数据组装成Event通过自定义的 TypeInterceptor 来根据其Body中的内容向Header中添加不同的type字段键值，然后通过 Multiplexing Channel Selector将不同type的Event发送给不同的Channel，并最终分别在a2和a3的控制台上输出</strong></p><h3 id="5）启动命令"><a href="#5）启动命令" class="headerlink" title="5）启动命令"></a>5）启动命令</h3><p><strong>Agent a1至a3分别运行在主机hadoop101、hadoop102、hadoop103上</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/flume-ng agent -n a1 -c conf -f flume1.properties</span><br><span class="line">./bin/flume-ng agent -n a2 -c conf -f flume2.properties -Dflume.root.logger=INFO,console</span><br><span class="line">./bin/flume-ng agent -n a3 -c conf -f flume3.properties -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="Flume" scheme="https://tomandersen-cc.github.io/categories/Flume/"/>
    
    
      <category term="Linux" scheme="https://tomandersen-cc.github.io/tags/Linux/"/>
    
      <category term="Flume" scheme="https://tomandersen-cc.github.io/tags/Flume/"/>
    
      <category term="大数据" scheme="https://tomandersen-cc.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="HDFS" scheme="https://tomandersen-cc.github.io/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>Flume之实现和使用自定义Interceptor</title>
    <link href="https://tomandersen-cc.github.io/2020/03/05/Flume%E4%B9%8B%E5%AE%9E%E7%8E%B0%E5%92%8C%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89Interceptor/"/>
    <id>https://tomandersen-cc.github.io/2020/03/05/Flume%E4%B9%8B%E5%AE%9E%E7%8E%B0%E5%92%8C%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89Interceptor/</id>
    <published>2020-03-05T12:41:52.000Z</published>
    <updated>2020-03-08T13:45:07.214Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>Flume Interceptor拦截器的作用在于能够在Event从Source传输到Channel过程中，修改或者删除Event的Header。多个拦截器Interceptor组成一个拦截器链，拦截器的执行顺序与配置顺序相同，上一个拦截器Interceptor处理后的Event List会传给下一个Interceptor</li><li>在Flume中自定义Interceptor时，需要实现org.apache.flume.interceptor.Interceptor接口，以及创建静态内部类去实现org.apache.flume.interceptor.Interceptor.Builder接口</li><li>更多详细内容可以参考《Flume构建高可用、可扩展的海量日志采集系统》</li></ul><hr><h2 id="实现自定义Interceptor拦截器"><a href="#实现自定义Interceptor拦截器" class="headerlink" title="实现自定义Interceptor拦截器"></a>实现自定义Interceptor拦截器</h2><h3 id="1）根据使用场景创建Interceptor类"><a href="#1）根据使用场景创建Interceptor类" class="headerlink" title="1）根据使用场景创建Interceptor类"></a>1）根据使用场景创建Interceptor类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化时可以不做操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单个Event拦截</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Event <span class="title">intercept</span><span class="params">(<span class="keyword">final</span> Event event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取Event中的Header</span></span><br><span class="line">        Map&lt;String, String&gt; headers = event.getHeaders();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.获取Event中的Body,将其转换成字符串String</span></span><br><span class="line">        String body = <span class="keyword">new</span> String(event.getBody());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.根据Body中数据向Header添加键值对,表明日志类型</span></span><br><span class="line">        <span class="keyword">if</span> (body.contains(<span class="string">"cm"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 4.添加Header信息</span></span><br><span class="line">            headers.put(<span class="string">"type"</span>, <span class="string">"Startup"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 4.添加Header信息</span></span><br><span class="line">            headers.put(<span class="string">"type"</span>, <span class="string">"Event"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> event;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量Event拦截</span></span><br><span class="line">    <span class="comment">// 注意:既可以原Event集合进行修改,也可以创建新的Event集合作为成员变量,将此成员变量返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Event&gt; <span class="title">intercept</span><span class="params">(<span class="keyword">final</span> List&lt;Event&gt; events)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Event event : events) &#123;</span><br><span class="line">            <span class="comment">// 1.对每个Event采用单个Event拦截的方式进行处理,忽略其返回值</span></span><br><span class="line">            intercept(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.返回处理结果</span></span><br><span class="line">        <span class="keyword">return</span> events;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭时可以不作操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建静态内部类实现Interceptor.Builder接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">implements</span> <span class="title">Interceptor</span>.<span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义配置信息</span></span><br><span class="line">        <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义Interceptor生成器</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Interceptor <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TypeInterceptor();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取配置信息</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.context = context;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）将此Interceptor类打包，并将jar包放入flume-lib路径下"><a href="#2）将此Interceptor类打包，并将jar包放入flume-lib路径下" class="headerlink" title="2）将此Interceptor类打包，并将jar包放入flume/lib路径下"></a>2）将此Interceptor类打包，并将jar包放入<code>flume/lib</code>路径下</h3><p><strong>此路径在Flume运行时的ClassPath中，因而可以在flume配置文件中可以通过全类名指定使用的Interceptor.Builder类</strong></p><p><strong>Maven项目打包插件配置可以参考：</strong><a href="https://blog.csdn.net/TomAndersen/article/details/104245064" target="_blank" rel="noopener">《IDEA中配置Maven项目打包插件》</a></p><hr><h2 id="创建flume-Agent配置文件"><a href="#创建flume-Agent配置文件" class="headerlink" title="创建flume Agent配置文件"></a>创建flume Agent配置文件</h2><h3 id="1）flume1-properties"><a href="#1）flume1-properties" class="headerlink" title="1）flume1.properties"></a>1）flume1.properties</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flume1:此配置用于监控单个或多个指定文件将其追加内容先通过自定义的TypeInterceptor</span></span><br><span class="line"><span class="comment"># 向Header中添加type字段,然后使用Multiplexing Channel Selector将不同type的Event</span></span><br><span class="line"><span class="comment"># 传输到不同的Channel中,最后分别输出到flume2和flume3的控制台</span></span><br><span class="line"><span class="comment"># a1:TailDir Source-&gt; TypeInterceptor -&gt; Multiplexing Channel Selector -&gt;</span></span><br><span class="line"><span class="comment">#   Memory Channel -&gt; Avro Sink</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1 c2</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sources</span></span><br><span class="line"><span class="comment"># a1.sources.r1</span></span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line"><span class="comment"># 设置Json文件存储路径(最好使用绝对路径)</span></span><br><span class="line"><span class="comment"># 用于记录文件inode/文件的绝对路径/每个文件的最后读取位置等信息</span></span><br><span class="line">a1.sources.r1.positionFile = /opt/module/flume-1.8.0/.position/taildir_position.json</span><br><span class="line"><span class="comment"># 指定监控的文件组</span></span><br><span class="line">a1.sources.r1.filegroups = f1</span><br><span class="line"><span class="comment"># 配置文件组中的被监控文件</span></span><br><span class="line"><span class="comment"># 设置f2组的监控文件,注意:使用的是正则表达式,而不是Linux通配符</span></span><br><span class="line">a1.sources.r1.filegroups.f1 = /tmp/logs/^.*<span class="built_in">log</span>$</span><br><span class="line"></span><br><span class="line"><span class="comment"># Interceptor</span></span><br><span class="line"><span class="comment"># a1.sources.r1.interceptors</span></span><br><span class="line"><span class="comment"># 配置Interceptor链,Interceptor调用顺序与配置循序相同</span></span><br><span class="line">a1.sources.r1.interceptors = typeInterceptor</span><br><span class="line"><span class="comment"># 指定使用的自定义Interceptor全类名,并使用其中的静态内部类Builder</span></span><br><span class="line"><span class="comment"># 要想使用自定义Interceptor,必须将实现的类打包成jar包放入$FLUME_HOME/lib文件夹中</span></span><br><span class="line"><span class="comment"># flume运行Java程序时会将此路径加入到ClassPath中</span></span><br><span class="line">a1.sources.r1.interceptors.typeInterceptor.type = com.tomandersen.interceptors.TypeInterceptor<span class="variable">$Builder</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line"><span class="comment"># a1.channels.c1</span></span><br><span class="line"><span class="comment"># 使用内存作为缓存/最多缓存的Event个数/单次传输的Event个数</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"><span class="comment"># a1.channels.c2</span></span><br><span class="line">a1.channels.c2.type = memory</span><br><span class="line">a1.channels.c2.capacity = 1000</span><br><span class="line">a1.channels.c2.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Channel Selector</span></span><br><span class="line"><span class="comment"># a1.sources.r1.selector</span></span><br><span class="line"><span class="comment"># 使用Multiple Channel Selector</span></span><br><span class="line">a1.sources.r1.selector.type = multiplexing</span><br><span class="line"><span class="comment"># 设置匹配Header的字段</span></span><br><span class="line">a1.sources.r1.selector.header = <span class="built_in">type</span></span><br><span class="line"><span class="comment"># 设置不同字段的值映射至各个Channel,其余的Event默认丢弃</span></span><br><span class="line">a1.sources.r1.selector.mapping.Startup = c1</span><br><span class="line">a1.sources.r1.selector.mapping.Event = c2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sinks</span></span><br><span class="line"><span class="comment"># a1.sinks.k1</span></span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = hadoop102</span><br><span class="line">a1.sinks.k1.port = 4141</span><br><span class="line"><span class="comment"># a1.sinks.k2</span></span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.hostname = hadoop103</span><br><span class="line">a1.sinks.k2.port = 4141</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind</span></span><br><span class="line"><span class="comment"># r1-&gt;TypeInterceptor-&gt;Multiplexing Channel Selector-&gt;c1-&gt;k1</span></span><br><span class="line"><span class="comment"># r1-&gt;TypeInterceptor-&gt;Multiplexing Channel Selector-&gt;c2-&gt;k2</span></span><br><span class="line">a1.sources.r1.channels = c1 c2</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k2.channel = c2</span><br></pre></td></tr></table></figure><h3 id="2）flume2-properties"><a href="#2）flume2-properties" class="headerlink" title="2）flume2.properties"></a>2）flume2.properties</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flume2:此配置用于将来自指定Avro端口的数据输出到控制台中</span></span><br><span class="line"><span class="comment"># a2:Avro Source-&gt;Memory Channel-&gt;Logger Sink</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Agent</span></span><br><span class="line">a2.sources = r1</span><br><span class="line">a2.channels = c1</span><br><span class="line">a2.sinks = k1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sources</span></span><br><span class="line">a2.sources.r1.type = avro</span><br><span class="line">a2.sources.r1.bind = 0.0.0.0</span><br><span class="line">a2.sources.r1.port = 4141</span><br><span class="line"></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line">a2.channels.c1.type = memory</span><br><span class="line">a2.channels.c1.capacity = 1000</span><br><span class="line">a2.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sinks</span></span><br><span class="line"><span class="comment"># 运行时设置参数 -Dflume.root.logger=INFO,console 即输出到控制台实时显示</span></span><br><span class="line">a2.sinks.k1.type = logger</span><br><span class="line"><span class="comment"># 设置Event的Body中写入log的最大字节数(默认值为16)</span></span><br><span class="line">a2.sinks.k1.maxBytesToLog = 256</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind</span></span><br><span class="line">r1-&gt;c1-&gt;k1</span><br><span class="line">a2.sources.r1.channels = c1</span><br><span class="line">a2.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><h3 id="3）flume3-properties"><a href="#3）flume3-properties" class="headerlink" title="3）flume3.properties"></a>3）flume3.properties</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flume3:此配置用于将来自指定Avro端口的数据输出到控制台中</span></span><br><span class="line"><span class="comment"># a3:Avro Source-&gt;Memory Channel-&gt;Logger Sink</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Agent</span></span><br><span class="line">a3.sources = r1</span><br><span class="line">a3.channels = c1</span><br><span class="line">a3.sinks = k1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sources</span></span><br><span class="line">a3.sources.r1.type = avro</span><br><span class="line">a3.sources.r1.bind = 0.0.0.0</span><br><span class="line">a3.sources.r1.port = 4141</span><br><span class="line"></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line">a3.channels.c1.type = memory</span><br><span class="line">a3.channels.c1.capacity = 1000</span><br><span class="line">a3.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sinks</span></span><br><span class="line"><span class="comment"># 运行时设置参数 -Dflume.root.logger=INFO,console 即输出到控制台实时显示</span></span><br><span class="line">a3.sinks.k1.type = logger</span><br><span class="line"><span class="comment"># 设置Event的Body中写入log的最大字节数(默认值为16)</span></span><br><span class="line">a3.sinks.k1.maxBytesToLog = 256</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind</span></span><br><span class="line">r1-&gt;c1-&gt;k1</span><br><span class="line">a3.sources.r1.channels = c1</span><br><span class="line">a3.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><h3 id="4）对应功能"><a href="#4）对应功能" class="headerlink" title="4）对应功能"></a>4）对应功能</h3><p><strong>Flume Agent a1监听本地指定文件,将监听到的数据组装成Event通过自定义的 TypeInterceptor 来根据其Body中的内容向Header中添加不同的type字段键值，然后通过 Multiplexing Channel Selector将不同type的Event发送给不同的Channel，并最终分别在Flume Agent a2和a3的控制台上输出</strong></p><h3 id="5）启动命令"><a href="#5）启动命令" class="headerlink" title="5）启动命令"></a>5）启动命令</h3><p><strong>Flume Agent a1至a3分别运行在主机hadoop101、hadoop102、hadoop103上</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/flume-ng agent -n a1 -c conf -f flume1.properties</span><br><span class="line">./bin/flume-ng agent -n a2 -c conf -f flume2.properties -Dflume.root.logger=INFO,console</span><br><span class="line">./bin/flume-ng agent -n a3 -c conf -f flume3.properties -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="Flume" scheme="https://tomandersen-cc.github.io/categories/Flume/"/>
    
    
      <category term="Linux" scheme="https://tomandersen-cc.github.io/tags/Linux/"/>
    
      <category term="Flume" scheme="https://tomandersen-cc.github.io/tags/Flume/"/>
    
      <category term="大数据" scheme="https://tomandersen-cc.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Maven之子模块pom.xml继承父模块pom.xml配置</title>
    <link href="https://tomandersen-cc.github.io/2020/03/05/Maven%E4%B9%8B%E5%AD%90%E6%A8%A1%E5%9D%97pom-xml%E7%BB%A7%E6%89%BF%E7%88%B6%E6%A8%A1%E5%9D%97pom-xml%E9%85%8D%E7%BD%AE/"/>
    <id>https://tomandersen-cc.github.io/2020/03/05/Maven%E4%B9%8B%E5%AD%90%E6%A8%A1%E5%9D%97pom-xml%E7%BB%A7%E6%89%BF%E7%88%B6%E6%A8%A1%E5%9D%97pom-xml%E9%85%8D%E7%BD%AE/</id>
    <published>2020-03-05T12:17:42.000Z</published>
    <updated>2020-03-06T12:11:10.228Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Maven中可以通过继承父模块pom，来实现pom.xml配置的继承和传递，便于各种Maven插件以及程序依赖的统一管理。通过将子类模块的公共配置，抽象聚合生成父类模块，能够避免pom.xml的重复配置。由于父类模块本身并不包含除了POM之外的项目文件，也就不需要src/main/java之类的文件夹了。每当需要对多个子模块进行相同的配置时，只需要在父类模块的pom中进行配置，而子类中声明使用此配置即可，当然子类pom中也可以自定义配置，并覆盖父类中的各项配置，和Java中类的继承类似。</p><hr><h2 id="可继承的POM元素"><a href="#可继承的POM元素" class="headerlink" title="可继承的POM元素"></a>可继承的POM元素</h2><p><strong>1) <code>groupId</code>：项目组ID，项目坐标的核心元素</strong></p><p><strong>2) <code>version</code>：项目版本，项目坐标的核心元素</strong></p><p><strong>3) <code>description</code>：项目的表述信息</strong></p><p><strong>4) <code>organization</code>：项目的组织信息</strong></p><p><strong>5) <code>inception Year</code>：项目的创始年份</strong></p><p><strong>6) <code>url</code>：项目的URL地址</strong></p><p><strong>7) <code>developers</code>：项目的开发者信息</strong></p><p><strong>8) <code>contributors</code>：项目的贡献者信息</strong></p><p><strong>9) <code>distributionManagement</code>：项目的部署管理</strong></p><p><strong>10) <code>issueManagement</code>：项目的缺陷和跟踪系统信息</strong></p><p><strong>11) <code>ciManagement</code>：项目的持续集成信息系统</strong></p><p><strong>12) <code>scm</code>：项目的版本控制系统信息</strong></p><p><strong>13) <code>mailingLists</code>：项目的邮件列表信息</strong></p><p><strong>14) <code>properties</code>：自定义的Maven属性</strong></p><p><strong>15) <code>dependencies</code>：项目的依赖属性</strong></p><p><strong>16) <code>dependencyManagement</code>：项目的依赖管理配置</strong></p><p><strong>17) <code>repositories</code>：项目的仓库配置</strong></p><p><strong>18) <code>build</code>：包括项目的源码目录配置、输出目录配置、插件配置、插件管理配置等</strong></p><p><strong>19) <code>reporting</code>：包括项目的报告输出目录配置、报告插件配置等</strong></p><hr><h2 id="POM继承中的依赖管理和插件管理"><a href="#POM继承中的依赖管理和插件管理" class="headerlink" title="POM继承中的依赖管理和插件管理"></a>POM继承中的依赖管理和插件管理</h2><p>Maven提供的<code>dependencyManagement</code>和<code>pluginManagement</code>元素用于帮助POM继承过程中的依赖管理和插件管理。在父类POM下，此两个元素中的声明的依赖或配置并不会引入实际的依赖或是造成实际的插件调用行为，不过它们能够约束子类POM中的依赖和插件配置的声明。只有当子类POM中配置了真正的<code>dependency</code>或<code>plugin</code>，并且其<code>groupId</code>和<code>artifactId</code>与父类POM中<code>dependencyManagement</code>和<code>pluginManagement</code>相对应时，才会进行实际的依赖引入或插件调用，当然子类中也能够进行自定义配置去覆盖父类，或是额外声明自己的配置</p><hr><h2 id="POM继承示例"><a href="#POM继承示例" class="headerlink" title="POM继承示例"></a>POM继承示例</h2><p><strong>1) 在父类POM中使用<code>dependencyManagement</code>和<code>pluginManagement</code>，声明子类POM中可能用到的依赖和插件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tomandersen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HadoopCustomModules<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>flume<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>log-collector<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--事先声明版本属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.20<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logback.version</span>&gt;</span>1.0.7<span class="tag">&lt;/<span class="name">logback.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在父类Maven中使用dependencyManagement声明依赖便于子类Module继承使用,也便于进行依赖版本控制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--阿里巴巴开源json解析框架--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.51<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--日志生成框架--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logback.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logback.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在父类Maven中使用pluginManagement管理插件便于子类Module继承使用,也便于进行依赖版本控制--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Maven项目编译器compiler插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--Maven项目汇编assembly插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--子类Maven通过mainClass标签设置成主类的全类名FQCN--&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--&lt;mainClass&gt;&lt;/mainClass&gt;--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2) 在子类POM中声明父类POM，并配置实际使用的<code>dependency</code>和<code>plugin</code>，只需要通过声明<code>groupId</code>和<code>artifactId</code>就可以避免配置各种依赖和插件的详细配置，当然也可以自己覆盖父类配置信息</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明父类POM--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HadoopCustomModules<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tomandersen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--子类POM信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tomandersen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log-collector<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--阿里巴巴开源json解析框架--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志生成框架--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自定义Maven项目编译器compiler插件相关配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--自定义Maven项目汇编assembly插件相关配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--此处设置成主类的全名--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.tomandersen.appclient.AppMain<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="更多详细内容可以查阅《Maven实战》"><a href="#更多详细内容可以查阅《Maven实战》" class="headerlink" title="更多详细内容可以查阅《Maven实战》"></a>更多详细内容可以查阅《Maven实战》</h2><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="Maven" scheme="https://tomandersen-cc.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://tomandersen-cc.github.io/tags/Maven/"/>
    
      <category term="XML" scheme="https://tomandersen-cc.github.io/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>Flume之HDFS-Sink使用案例</title>
    <link href="https://tomandersen-cc.github.io/2020/03/05/Flume%E4%B9%8BHDFS-Sink%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/"/>
    <id>https://tomandersen-cc.github.io/2020/03/05/Flume%E4%B9%8BHDFS-Sink%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</id>
    <published>2020-03-05T03:39:58.000Z</published>
    <updated>2020-03-08T13:41:28.431Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>操作系统：CentOS 7</li><li>Java版本：1.8.0_221</li><li>Flume版本：1.8.0</li><li>HDFS版本：2.7.7</li><li>Flume agent配置：Netcat TCP Source、Memory Channel、HDFS Sink</li></ul><hr><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="a-拷贝Hadoop相关jar包至flume-lib-路径下"><a href="#a-拷贝Hadoop相关jar包至flume-lib-路径下" class="headerlink" title="a) 拷贝Hadoop相关jar包至flume/lib/路径下"></a>a) 拷贝Hadoop相关jar包至<code>flume/lib/</code>路径下</h3><h4 id="在hadoop-2-7-7-share-路径下找到以下对应jar包，并将其拷贝至flume-lib-路径下。Flume启动时，会将此路径添加至ClassPath"><a href="#在hadoop-2-7-7-share-路径下找到以下对应jar包，并将其拷贝至flume-lib-路径下。Flume启动时，会将此路径添加至ClassPath" class="headerlink" title="在hadoop-2.7.7/share/路径下找到以下对应jar包，并将其拷贝至flume/lib/路径下。Flume启动时，会将此路径添加至ClassPath"></a>在<code>hadoop-2.7.7/share/</code>路径下找到以下对应jar包，并将其拷贝至<code>flume/lib/</code>路径下。Flume启动时，会将此路径添加至ClassPath</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">commons-configuration-1.6.jar</span><br><span class="line">commons-io-2.4.jar</span><br><span class="line">hadoop-auth-2.7.7.jar</span><br><span class="line">hadoop-common-2.7.7.jar</span><br><span class="line">hadoop-hdfs-2.7.7.jar</span><br><span class="line">htrace-core-3.1.0-incubating.jar</span><br></pre></td></tr></table></figure><h3 id="b-根据使用场景配置properties文件"><a href="#b-根据使用场景配置properties文件" class="headerlink" title="b) 根据使用场景配置properties文件"></a>b) 根据使用场景配置properties文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于从netcat指定端口收集数据最终输出到HDFS中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sources</span></span><br><span class="line"><span class="comment"># a1.sources.r1</span></span><br><span class="line"><span class="comment"># 配置source类型/绑定主机ip/端口号</span></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sinks</span></span><br><span class="line"><span class="comment"># a1.sinks.k1</span></span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line"><span class="comment"># 设置hdfs文件路径,同时并设置了按照日期创建文件夹</span></span><br><span class="line">a1.sinks.k1.hdfs.path = /flume/logs/%Y-%m-%d/%H-%M-%S</span><br><span class="line"><span class="comment"># 设置flume创建的hdfs文件前缀</span></span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = logs_%Y-%m-%d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下三组参数的配置用于控制flume在hdfs中生成文件的滚动方式</span></span><br><span class="line"><span class="comment"># 满足以下三者中任何一个条件都会新生成hdfs文件</span></span><br><span class="line"><span class="comment"># 设置文件滚动的时间间隔,单位(second),置0表示关闭</span></span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 10</span><br><span class="line"><span class="comment"># 设置文件滚动的最大size阈值,由于是hdfs sink故最好设置成Block Size的倍数</span></span><br><span class="line"><span class="comment"># 本次实验的hadoop版本为2.7.7(2.7.3之后默认Block Size为128MB,之前为64MB)</span></span><br><span class="line"><span class="comment"># 单位(bytes),置0表示关闭</span></span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 134217700</span><br><span class="line"><span class="comment"># 设置滚动文件存储的最大Event个数</span></span><br><span class="line"><span class="comment"># 此参数一般设置为0,即关闭,除非有严格生产需求并且知道Event大小能够自主控制</span></span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置flume每批次刷到hdfs中的Event个数(超过一定时长也会进行刷新,并非要等满一批次)</span></span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置hdfs文件格式,目前只支持(SequenceFile/DataStream/CompressedStream)</span></span><br><span class="line"><span class="comment"># CompressedStream类型需要配合hdfs.codeC参数来指定具体的压缩方式</span></span><br><span class="line"><span class="comment"># SequenceFile表示按照HDFS序列文件SequenceFile的方式进行压缩</span></span><br><span class="line"><span class="comment"># DataStream则表示不进行压缩</span></span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下三组参数的配置配合转义序列(如%y %m %d %H %M %S等)能够自定义时间轮转最小刻度</span></span><br><span class="line"><span class="comment"># 设置hdfs时间向下取整</span></span><br><span class="line"><span class="comment"># 设置向下取整之后文件夹将按照一定时间大小的刻度进行创建文件夹</span></span><br><span class="line"><span class="comment"># 否则都是按照之前设置每分钟进行文件夹的创建</span></span><br><span class="line">a1.sinks.k1.hdfs.round = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 设置hdfs时间向下取整的最小单元倍数</span></span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 30</span><br><span class="line"><span class="comment"># 设置hdfs时间向下取整的最小单位</span></span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = second</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定是否使用本地时间戳,默认为false(即使用Event的Header中的时间戳)</span></span><br><span class="line"><span class="comment"># 本次实验中Event的Header为空,需要使用本地时间戳</span></span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Channels</span></span><br><span class="line"><span class="comment"># 定义a2的channerls.c1的类型为memory,即使用内存作为缓存/最多缓存的Event个数/单次传输的Event个数</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind</span></span><br><span class="line"><span class="comment"># 注意:source可以绑定多个channel,但是sink只能绑定单个channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><h3 id="c-使用此配置文件启动agent"><a href="#c-使用此配置文件启动agent" class="headerlink" title="c) 使用此配置文件启动agent"></a>c) 使用此配置文件启动agent</h3><h4 id="启动脚本前保证HDFS集群正常运行"><a href="#启动脚本前保证HDFS集群正常运行" class="headerlink" title="启动脚本前保证HDFS集群正常运行"></a>启动脚本前保证HDFS集群正常运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[tomandersen@hadoop101 flume-1.8.0]$ call-cluster.sh jps</span><br><span class="line">----------hadoop103----------</span><br><span class="line">18272 Jps</span><br><span class="line">17794 DataNode</span><br><span class="line">17987 NodeManager</span><br><span class="line">18105 JobHistoryServer</span><br><span class="line">17868 SecondaryNameNode</span><br><span class="line">----------hadoop102----------</span><br><span class="line">17826 DataNode</span><br><span class="line">18457 Jps</span><br><span class="line">17950 ResourceManager</span><br><span class="line">18079 NodeManager</span><br><span class="line">----------hadoop101----------</span><br><span class="line">10321 DataNode</span><br><span class="line">10785 Jps</span><br><span class="line">10619 NodeManager</span><br><span class="line">10205 NameNode</span><br><span class="line"></span><br><span class="line">----------execute <span class="string">"jps"</span> <span class="keyword">in</span> cluster takes 6 seconds----------</span><br><span class="line"></span><br><span class="line">[tomandersen@hadoop101 flume-1.8.0]$</span><br></pre></td></tr></table></figure><h4 id="在Flume安装路径下通过bin-flume-ng脚本启动agent"><a href="#在Flume安装路径下通过bin-flume-ng脚本启动agent" class="headerlink" title="在Flume安装路径下通过bin/flume-ng脚本启动agent"></a>在Flume安装路径下通过<code>bin/flume-ng</code>脚本启动agent</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/flume-ng agent -n a1 -c conf/ -f job/netcat-memory-hdfs.properties</span><br></pre></td></tr></table></figure><h3 id="d-发送测试数据并检查HDFS中是否成功上传对应数据"><a href="#d-发送测试数据并检查HDFS中是否成功上传对应数据" class="headerlink" title="d) 发送测试数据并检查HDFS中是否成功上传对应数据"></a>d) 发送测试数据并检查HDFS中是否成功上传对应数据</h3><h4 id="发送测试数据"><a href="#发送测试数据" class="headerlink" title="发送测试数据"></a>发送测试数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[tomandersen@hadoop101 ~]$ <span class="built_in">echo</span> Hello World! | nc localhost 44444</span><br><span class="line">OK</span><br><span class="line">[tomandersen@hadoop101 ~]$ </span><br><span class="line">[tomandersen@hadoop101 ~]$</span><br></pre></td></tr></table></figure><h4 id="进入NameNode-Web-UI页面查看HDFS文件"><a href="#进入NameNode-Web-UI页面查看HDFS文件" class="headerlink" title="进入NameNode Web UI页面查看HDFS文件"></a>进入NameNode Web UI页面查看HDFS文件</h4><p><img src="https://img-blog.csdnimg.cn/20200305113842376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbUFuZGVyc2Vu,size_16,color_FFFFFF,t_70" alt="查看HDFS文件"></p><h4 id="下载并查看查看HDFS文件内容"><a href="#下载并查看查看HDFS文件内容" class="headerlink" title="下载并查看查看HDFS文件内容"></a>下载并查看查看HDFS文件内容</h4><p><img src="https://img-blog.csdnimg.cn/20200305113859854.png" alt="查看HDFS文件"></p><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="Flume" scheme="https://tomandersen-cc.github.io/categories/Flume/"/>
    
    
      <category term="Linux" scheme="https://tomandersen-cc.github.io/tags/Linux/"/>
    
      <category term="Flume" scheme="https://tomandersen-cc.github.io/tags/Flume/"/>
    
      <category term="大数据" scheme="https://tomandersen-cc.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="HDFS" scheme="https://tomandersen-cc.github.io/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>Flume之入门级安装部署</title>
    <link href="https://tomandersen-cc.github.io/2020/03/05/Flume%E4%B9%8B%E5%85%A5%E9%97%A8%E7%BA%A7%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <id>https://tomandersen-cc.github.io/2020/03/05/Flume%E4%B9%8B%E5%85%A5%E9%97%A8%E7%BA%A7%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</id>
    <published>2020-03-05T01:30:13.000Z</published>
    <updated>2020-03-06T11:43:56.498Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>操作系统：CentOS 7</li><li>Java版本：1.8.0_221</li><li>Flume版本：1.8.0</li></ul><hr><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="a-下载flume"><a href="#a-下载flume" class="headerlink" title="a) 下载flume"></a>a) 下载flume</h3><ul><li>flume官网：<a href="https://flume.apache.org/" target="_blank" rel="noopener">https://flume.apache.org/</a></li><li>flume最新版：<a href="https://flume.apache.org/download.html" target="_blank" rel="noopener">https://flume.apache.org/download.html</a></li><li>flume各个历史版本：<a href="http://archive.apache.org/dist/flume/" target="_blank" rel="noopener">http://archive.apache.org/dist/flume/</a></li></ul><h3 id="b-安装flume"><a href="#b-安装flume" class="headerlink" title="b) 安装flume"></a>b) 安装flume</h3><h4 id="将flume解压到指定路径下"><a href="#将flume解压到指定路径下" class="headerlink" title="将flume解压到指定路径下"></a>将flume解压到指定路径下</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf apache-flume-1.8.0-bin.tar.gz -C /opt/module/</span><br></pre></td></tr></table></figure><h4 id="修改flume默认文件夹名（可选）"><a href="#修改flume默认文件夹名（可选）" class="headerlink" title="修改flume默认文件夹名（可选）"></a>修改flume默认文件夹名（可选）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv apache-flume-1.8.0-bin flume-1.8.0</span><br></pre></td></tr></table></figure><h3 id="c-配置flume-env-sh文件"><a href="#c-配置flume-env-sh文件" class="headerlink" title="c) 配置flume-env.sh文件"></a>c) 配置flume-env.sh文件</h3><h4 id="拷贝flume-1-8-0-conf-flume-env-sh-template，创建flume-env-sh文件"><a href="#拷贝flume-1-8-0-conf-flume-env-sh-template，创建flume-env-sh文件" class="headerlink" title="拷贝flume-1.8.0/conf/flume-env.sh.template，创建flume-env.sh文件"></a>拷贝<code>flume-1.8.0/conf/flume-env.sh.template</code>，创建<code>flume-env.sh</code>文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp flume-env.sh.template flume-env.sh</span><br></pre></td></tr></table></figure><h4 id="或者直接重命名"><a href="#或者直接重命名" class="headerlink" title="或者直接重命名"></a>或者直接重命名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv flume-env.sh.template flume-env.sh</span><br></pre></td></tr></table></figure><h4 id="修改flume-env-sh中JAVA-HOME，将其设置成Java安装绝对路径"><a href="#修改flume-env-sh中JAVA-HOME，将其设置成Java安装绝对路径" class="headerlink" title="修改flume-env.sh中JAVA_HOME，将其设置成Java安装绝对路径"></a>修改<code>flume-env.sh</code>中<code>JAVA_HOME</code>，将其设置成Java安装绝对路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim flume-env.sh</span><br><span class="line"><span class="comment"># 修改前</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-8-oracle</span><br><span class="line"><span class="comment"># 修改后</span></span><br><span class="line"><span class="comment"># export JAVA_HOME=/usr/lib/jvm/java-8-oracle</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/module/jdk1.8.0_221</span><br></pre></td></tr></table></figure><h4 id="至此flume就已经配置完成了，flume运行日志的默认数据追加路径为-logs-flume-log"><a href="#至此flume就已经配置完成了，flume运行日志的默认数据追加路径为-logs-flume-log" class="headerlink" title="至此flume就已经配置完成了，flume运行日志的默认数据追加路径为./logs/flume.log"></a>至此flume就已经配置完成了，flume运行日志的默认数据追加路径为<code>./logs/flume.log</code></h4><h4 id="若要修改flume运行日志输出路径，修改并配置flume-1-8-0-conf-log4j-properties文件即可"><a href="#若要修改flume运行日志输出路径，修改并配置flume-1-8-0-conf-log4j-properties文件即可" class="headerlink" title="若要修改flume运行日志输出路径，修改并配置flume-1.8.0/conf/log4j.properties文件即可"></a>若要修改flume运行日志输出路径，修改并配置<code>flume-1.8.0/conf/log4j.properties</code>文件即可</h4><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="Flume" scheme="https://tomandersen-cc.github.io/categories/Flume/"/>
    
    
      <category term="Linux" scheme="https://tomandersen-cc.github.io/tags/Linux/"/>
    
      <category term="Flume" scheme="https://tomandersen-cc.github.io/tags/Flume/"/>
    
      <category term="大数据" scheme="https://tomandersen-cc.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Page绑定至个人域名</title>
    <link href="https://tomandersen-cc.github.io/2020/03/04/Github-Page%E7%BB%91%E5%AE%9A%E8%87%B3%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/"/>
    <id>https://tomandersen-cc.github.io/2020/03/04/Github-Page%E7%BB%91%E5%AE%9A%E8%87%B3%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/</id>
    <published>2020-03-04T15:15:03.000Z</published>
    <updated>2020-03-08T13:51:13.280Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><strong>此教程主要用于将个人域名映射至Github Page，同时实现Github Page在个人域名的发布</strong></li><li><strong>本次所使用的个人域名是在阿里云上申请注册所得</strong></li><li><strong>注意：如果想要取消Github Page发布，删除CNAME文件即可。然后清除浏览器缓存，就又可以使用原来的Github Page网址对其进行访问</strong></li></ul><hr><h2 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h2><h3 id="1-注册个人域名"><a href="#1-注册个人域名" class="headerlink" title="1. 注册个人域名"></a>1. 注册个人域名</h3><ul><li><strong>本人是在阿里云平台申请的个人域名，首年价格是19元，注册步骤就不再赘述了</strong></li><li><strong>实名认证到注册审批本人实测大概3个小时左右完成</strong></li></ul><h3 id="2-添加域名解析"><a href="#2-添加域名解析" class="headerlink" title="2. 添加域名解析"></a>2. 添加域名解析</h3><h4 id="a）进入阿里云控制台—域名列表，然后找到需要添加映射的个人域名"><a href="#a）进入阿里云控制台—域名列表，然后找到需要添加映射的个人域名" class="headerlink" title="a）进入阿里云控制台—域名列表，然后找到需要添加映射的个人域名"></a>a）进入阿里云控制台—域名列表，然后找到需要添加映射的个人域名</h4><p><img src="https://img-blog.csdnimg.cn/20200304231152820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbUFuZGVyc2Vu,size_16,color_FFFFFF,t_70" alt="添加域名解析"></p><h4 id="b）然后点击添加域名解析记录"><a href="#b）然后点击添加域名解析记录" class="headerlink" title="b）然后点击添加域名解析记录"></a>b）然后点击添加域名解析记录</h4><p><img src="https://img-blog.csdnimg.cn/20200304231210309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbUFuZGVyc2Vu,size_16,color_FFFFFF,t_70" alt="添加域名解析"></p><h4 id="c）配置域名映射"><a href="#c）配置域名映射" class="headerlink" title="c）配置域名映射"></a>c）配置域名映射</h4><ul><li><p><strong>“记录类型”设置成<code>CNAME</code></strong></p></li><li><p><strong>“主机记录”可以设置成<code>@</code>即直接使用主域名作映射，或者<code>www</code>即使用<code>www.主域名</code>的形式进行映射，因为本人是使用此域名映射个人博客，所以设置成<code>blog</code>即使用blog作为子域名且用于映射</strong></p></li><li><p><strong>“记录值”则设置成Github Page的网址即可</strong></p></li><li><p><strong>等待几分钟后生效</strong></p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200304231230144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbUFuZGVyc2Vu,size_16,color_FFFFFF,t_70" alt="添加域名解析"></p><ul><li><strong>至此就建立了个人域名至Github Page的映射，但此时还不能使建立映射的域名直接访问Github Page，因为还需要在Github上发布自己的Github Page，直接访问的话会出现Github Pages 404</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/20200304231251195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbUFuZGVyc2Vu,size_16,color_FFFFFF,t_70" alt="添加域名解析"></p><h3 id="3-发布Github-Page"><a href="#3-发布Github-Page" class="headerlink" title="3. 发布Github Page"></a>3. 发布Github Page</h3><h4 id="a）进入Github-Page仓库页面，点击Setting"><a href="#a）进入Github-Page仓库页面，点击Setting" class="headerlink" title="a）进入Github Page仓库页面，点击Setting"></a>a）进入Github Page仓库页面，点击Setting</h4><p><img src="https://img-blog.csdnimg.cn/20200304231309815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbUFuZGVyc2Vu,size_16,color_FFFFFF,t_70" alt="Setting"></p><h4 id="b）在其中找到Github-Page，通过编辑Custom-domain并保存来实现Github-Page发布"><a href="#b）在其中找到Github-Page，通过编辑Custom-domain并保存来实现Github-Page发布" class="headerlink" title="b）在其中找到Github Page，通过编辑Custom domain并保存来实现Github Page发布"></a>b）在其中找到Github Page，通过编辑<code>Custom domain</code>并保存来实现Github Page发布</h4><p><img src="https://img-blog.csdnimg.cn/20200304231323491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbUFuZGVyc2Vu,size_16,color_FFFFFF,t_70" alt="发布GithubPage"></p><h4 id="同时会发现在仓库中多出了CNAME文件，后续如果想要取消发布直接删除此文件即可，同时要清除浏览器缓存，否则会一直访问之前设置的页面"><a href="#同时会发现在仓库中多出了CNAME文件，后续如果想要取消发布直接删除此文件即可，同时要清除浏览器缓存，否则会一直访问之前设置的页面" class="headerlink" title="同时会发现在仓库中多出了CNAME文件，后续如果想要取消发布直接删除此文件即可，同时要清除浏览器缓存，否则会一直访问之前设置的页面"></a>同时会发现在仓库中多出了CNAME文件，后续如果想要取消发布直接删除此文件即可，同时要清除浏览器缓存，否则会一直访问之前设置的页面</h4><p><img src="https://img-blog.csdnimg.cn/20200304231342835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvbUFuZGVyc2Vu,size_16,color_FFFFFF,t_70" alt="CNAME文件"></p><h4 id="至此就实现了个人域名和映射和Github-Page的发布，通过之前设置的个人域名就能直接访问Github-Page"><a href="#至此就实现了个人域名和映射和Github-Page的发布，通过之前设置的个人域名就能直接访问Github-Page" class="headerlink" title="至此就实现了个人域名和映射和Github Page的发布，通过之前设置的个人域名就能直接访问Github Page"></a>至此就实现了个人域名和映射和Github Page的发布，通过之前设置的个人域名就能直接访问Github Page</h4><h3 id="4-在Hexo-source路径下创建CNAME文件"><a href="#4-在Hexo-source路径下创建CNAME文件" class="headerlink" title="4. 在Hexo/source路径下创建CNAME文件"></a>4. 在<code>Hexo/source</code>路径下创建CNAME文件</h3><p><strong>由于每次Deploy本地Hexo仓库时，都会清除GitHub上仓库中的CNAME文件，所以需要在Hexo根目录的source文件夹下创建CNAME文件，文件内容为个人域名，如：<code>blog.tomandersen.cn</code></strong></p><p><strong>这样每次部署时都会将CNMAE文件同时打包至远端Repository中，避免每次都要设置GitHub Page发布域名</strong></p><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="个人博客搭建" scheme="https://tomandersen-cc.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="GitHub" scheme="https://tomandersen-cc.github.io/tags/GitHub/"/>
    
      <category term="Blog" scheme="https://tomandersen-cc.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Shell中冒号的特殊用法</title>
    <link href="https://tomandersen-cc.github.io/2020/02/27/Shell%E4%B8%AD%E5%86%92%E5%8F%B7%E7%9A%84%E7%89%B9%E6%AE%8A%E7%94%A8%E6%B3%95/"/>
    <id>https://tomandersen-cc.github.io/2020/02/27/Shell%E4%B8%AD%E5%86%92%E5%8F%B7%E7%9A%84%E7%89%B9%E6%AE%8A%E7%94%A8%E6%B3%95/</id>
    <published>2020-02-27T01:37:46.000Z</published>
    <updated>2020-03-06T12:22:09.771Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>本文主要是参考了鸟哥写的《鸟哥的Linux私房菜》。因为总是在各种脚本中见到<code>:-</code>的用法而只是了解其大概含义，所以翻阅了相关资料，编写此博文以作记录</li></ul><hr><h2 id="Shell中冒号在变量赋值时的各种特殊用法"><a href="#Shell中冒号在变量赋值时的各种特殊用法" class="headerlink" title="Shell中冒号在变量赋值时的各种特殊用法"></a>Shell中冒号在变量赋值时的各种特殊用法</h2><table><thead><tr><th align="center">变量设定方式</th><th align="center">str变量没有设定时</th><th align="center">str为空字符串时</th><th align="center">str已经设定为非空字符串时</th></tr></thead><tbody><tr><td align="center">var=${str-expr}</td><td align="center">var=expr</td><td align="center">var=””</td><td align="center">var=$str</td></tr><tr><td align="center">var=${str:-expr}</td><td align="center">var=expr</td><td align="center">var=expr</td><td align="center">var=$str</td></tr><tr><td align="center">var=${str+expr}</td><td align="center">var=””</td><td align="center">var=expr</td><td align="center">var=expr</td></tr><tr><td align="center">var=${str:+expr}</td><td align="center">var=””</td><td align="center">var=””</td><td align="center">var=expr</td></tr><tr><td align="center">var=${str=expr}</td><td align="center">str=expr<br/>var=expr</td><td align="center">str 不变<br/>var=””</td><td align="center">str 不变<br/>var=$str</td></tr><tr><td align="center">var=${str:=expr}</td><td align="center">str=expr<br/>var=expr</td><td align="center">str=expr<br/>var=expr</td><td align="center">str 不变<br/>var=$str</td></tr><tr><td align="center">var=${str?expr}</td><td align="center">expr 输出至 stderr</td><td align="center">var=””</td><td align="center">var=$str</td></tr><tr><td align="center">var=${str:?expr}</td><td align="center">expr 输出至 stderr</td><td align="center">expr 输出至 stderr</td><td align="center">var=$str</td></tr></tbody></table><hr><h2 id="End"><a href="#End" class="headerlink" title="End~"></a>End~</h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="Shell" scheme="https://tomandersen-cc.github.io/categories/Shell/"/>
    
    
      <category term="CentOS7" scheme="https://tomandersen-cc.github.io/tags/CentOS7/"/>
    
      <category term="Linux" scheme="https://tomandersen-cc.github.io/tags/Linux/"/>
    
      <category term="Shell" scheme="https://tomandersen-cc.github.io/tags/Shell/"/>
    
  </entry>
  
</feed>
